'use strict';

var gulp = global.gulp = global.gulp || require('gulp');
var shelljs = global.shelljs = global.shelljs || require('shelljs');
var common = global.config = global.config || require('../utils/common.js');
var fs = global.fs = global.fs || require('fs');
var cdn = require('./cdn.js');
var gzip = require('gulp-gzip');
var config = common.config();

var gitignore =
    `.gitignore
!/**/*.ts
/*.ts
**/*.d.ts
!src/**/*-model.d.ts
!src/**/*-builder.d.ts
!src/**/*-interface.d.ts
dist/global/*.js
!dist/global/` + common.currentPackage + `*
`;

/**
 * Publish current package in github
 */
gulp.task('publish-github', ['publish-coverage'], function (done) {
    if (!common.isMasterBranch) {
        done();
        return;
    }

    // check github repository
    var user = process.env.GITHUB_USER;
    var token = process.env.GITHUB_TOKEN;
    shelljs.exec('curl https://' + user + ':' + token + '@api.github.com/repos/syncfusion/' + common.currentPackage, { silent: true },
        function (err, result) {
            var repoDetails = JSON.parse(result);
            if (repoDetails.message === 'Not Found') {
                console.log('There is no Github repository available for - ' + common.currentPackage);
                done();
                return;
            } else {
                // clone github repository                  
                var githubRepo = 'https://' + user + ':' + token + '@github.com/syncfusion/' + common.currentPackage + '.git';
                var simpleGit = require('simple-git');
                if (!fs.existsSync('./github-repo')) {
                    fs.mkdirSync('./github-repo');
                }
                simpleGit().clone(githubRepo, './github-repo', function (err) {
                    if (err) {
                        done(err);
                        return;
                    }
                }).exec(function () {
                    // remove all files in the current github repository
                    shelljs.rm('-rf', './github-repo/*');
                    // add all needed files in github repository
                    gulp.src(config.github, { base: '.' })
                        .pipe(gulp.dest('./github-repo'))
                        .on('end', function () {
                            if (config.samplesRepo.indexOf(common.currentRepo) !== -1) {
                                addSampleDependencies();
                            } else {
                                addDependencies();
                            }
                            var latestCommit = shelljs.exec('git log -1 --pretty=%B', { silent: true }).stdout;
                            var commitMessage = latestCommit.match(/\n([\s\S]*?)See merge request/);
                            commitMessage = commitMessage ? commitMessage[1] : latestCommit;
                            // commit the changes in github repository
                            simpleGit('./github-repo').init()
                                .add('./*')
                                .commit(commitMessage)
                                .push(githubRepo, 'master', function () {
                                    console.log(common.currentPackage + ' - package published in github');
                                    done();
                                });
                        });
                });
            }
        });
});

var buildDependencies = {
    'es6-promise': '^3.2.1',
    'gulp': '^3.9.1',
    'gulp-sass': '^3.1.0',
    'gulp-typescript': '^3.1.6',
    'requirejs': '^2.3.3',
    'typescript': '2.3.4'
};

var testDependencies = {
    'canteen': '^1.0.5',
    'jasmine-ajax': '^3.3.1',
    'jasmine-core': '^2.6.1',
    'karma': '^1.7.0',
    'karma-chrome-launcher': '^2.2.0',
    'karma-generic-preprocessor': '^1.1.0',
    'karma-htmlfile-reporter': '^0.3.5',
    'karma-jasmine': '^1.1.0',
    'karma-jasmine-ajax': '^0.1.13',
    'karma-requirejs': '^1.1.0',
    'nedb': '^1.8.0',
    'simple-odata-server': '^0.3.1'
};

var samplesDependencies = {
    'browser-sync': '2.11.2',
    'jasmine-ajax': '^3.3.1',
    'jasmine-core': '^2.6.1',
    'karma': '^1.7.0',
    'karma-chrome-launcher': '^2.2.0',
    'karma-generic-preprocessor': '^1.1.0',
    'karma-htmlfile-reporter': '^0.3.5',
    'karma-jasmine': '^1.1.0',
    'karma-jasmine-ajax': '^0.1.13',
    'karma-requirejs': '^1.1.0',
    'run-sequence': '^1.2.2',
    'webpack': '2.5.1',
    'webpack-stream': '^3.2.0'
};

var buildReadme = '\n\n## Installing\n\nTo install all dependent packages, use the below command\n\n' +
    '```\nnpm install\n```\n\n## Building\n\nTo compile the source files, use the below command' +
    '\n\n```\nnpm run build\n```';

var testReadme = '\n\n## Testing\n\nTo test the source files, use the below command\n\n' +
    '```\nnpm run test\n```';

var serveReadme = '\n\n## Running\n\nTo run the samples, use the below command\n\n' +
    '```\nnpm run serve\n```';

// var gitAttribute = `
// * linguist-vendored
// *.js linguist-vendored=false
// `;

function calculateCoverage() {
    var result = '';
    if (fs.existsSync('./coverage/report.txt')) {
        var report = fs.readFileSync('./coverage/report.txt', 'utf8');
        var statements = Number(report.match('Statements(.*)%')[1].replace(': ', '').trim());
        var branches = Number(report.match('Branches(.*)%')[1].replace(': ', '').trim());
        var functions = Number(report.match('Functions(.*)%')[1].replace(': ', '').trim());
        var lines = Number(report.match('Lines(.*)%')[1].replace(': ', '').trim());
        result = Math.round((statements + branches + functions + lines) / 4);
    }
    return result;
}

function createSVG(process, result, isPositive) {
    if (!process && result && isPositive) {
        return;
    }
    var color = isPositive ? '#97CA00' : '#e05d44';
    return `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="94" height="20">
    <linearGradient id="b" x2="0" y2="100%">
        <stop offset="0" stop-color="#bbb" stop-opacity=".1"/>
        <stop offset="1" stop-opacity=".1"/>
    </linearGradient>
    <clipPath id="a">
        <rect width="94" height="20" rx="3" fill="#fff"/>
    </clipPath>
    <g clip-path="url(#a)">
        <path fill="#555" d="M0 0h59v20H0z"/>
        <path fill="${color}" d="M59 0h35v20H59z"/>
        <path fill="url(#b)" d="M0 0h94v20H0z"/>
    </g>
    <g fill="#fff" text-anchor="middle" font-family="DejaVu Sans,Verdana,Geneva,sans-serif" font-size="11">
        <text x="29.5" y="15" fill="#010101" fill-opacity=".3">${process}</text>
        <text x="29.5" y="14">${process}</text>
        <text x="75.5" y="15" fill="#010101" fill-opacity=".3">${result}%</text>
        <text x="75.5" y="14">${result}%</text>
    </g>
</svg>`;
}

function addCoverageBadge() {
    var hostedSvg = `http://${process.env.AWS_PUBLIC_BUCKET}/coverage/${common.currentPackage}/coverage.svg`;
    var badge = `[![coverage](${hostedSvg})](http://${process.env.AWS_PUBLIC_BUCKET}/coverage/${common.currentPackage})\n\n`;
    var oldContent = fs.readFileSync('./ReadMe.md');
    var newContent = badge + oldContent;
    fs.writeFileSync('./ReadMe.md', newContent, 'utf-8');
}

function addDependencies() {
    shelljs.cd('./github-repo');
    fs.writeFileSync('./.gitignore', gitignore);
    //fs.writeFileSync('./.gitattribute', gitAttribute);
    var packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
    delete packageJson.devDependencies['@syncfusion/ej2-build'];
    if (fs.existsSync('../coverage')) {
        addCoverageBadge();
    }
    fs.appendFileSync('./ReadMe.md', buildReadme);
    fs.writeFileSync('./gulpfile.js', fs.readFileSync(__dirname + '/../github/build.js', 'utf8'));
    packageJson.scripts = {
        'build': 'gulp build'
    };
    Object.assign(packageJson.devDependencies, buildDependencies);
    if (!fs.existsSync('./spec/')) {
        fs.writeFileSync('./package.json', JSON.stringify(packageJson, null, '\t'));
        shelljs.cd('../');
        return packageJson.version;
    } else {
        packageJson.scripts.test = 'gulp test';
        Object.assign(packageJson.devDependencies, testDependencies);
        fs.appendFileSync('./ReadMe.md', testReadme);
        fs.appendFileSync('./gulpfile.js', fs.readFileSync(__dirname + '/../github/test.js', 'utf8'));
    }
    if (packageJson.dependencies['@syncfusion/ej2-data'] || packageJson.name === '@syncfusion/ej2-data') {
        fs.mkdirSync('./spec/services');
        fs.writeFileSync('./spec/services/V4service.js', fs.readFileSync(__dirname + '/../../services/V4service.js', 'utf8'));
    }
    if (fs.existsSync('./CHANGELOG.md')) {
        var packName = packageJson.name.replace('@syncfusion/', '');
        var changelog = '\n## Changelog\n\nCheck the changelog [here](https://github.com/syncfusion/' + packName +
            '/blob/master/CHANGELOG.md)';
        fs.appendFileSync('./ReadMe.md', changelog);
    }
    delete packageJson.config;
    fs.writeFileSync('./package.json', JSON.stringify(packageJson, null, '\t'));
    shelljs.cd('../');
    return packageJson.version;
}

function addSampleDependencies() {
    shelljs.cd('./github-repo');
    var packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
    delete packageJson.config;
    delete packageJson.devDependencies['@syncfusion/ej2-build'];
    fs.writeFileSync('./ReadMe.md', buildReadme);
    var build = common.currentRepo === 'ej2-ng-samples' ?
        'gulp styles && ngc -p tsconfig-aot.json && gulp bundle' : 'gulp build';
    var serve = common.currentRepo === 'ej2-ng-samples' ?
        'npm run build && gulp serve' : 'gulp serve';
    packageJson.scripts = {
        'build': build,
        'serve': serve
    };
    Object.assign(packageJson.devDependencies, buildDependencies);
    if (fs.existsSync('./spec/')) {
        packageJson.scripts.test = 'gulp test';
        fs.appendFileSync('./ReadMe.md', testReadme);
        Object.assign(packageJson.devDependencies, samplesDependencies);
    } else {
        Object.assign(packageJson.devDependencies, { 'browser-sync': '2.11.2', 'webpack': '2.5.1' });
    }
    fs.appendFileSync('./ReadMe.md', serveReadme);
    var samples = common.currentRepo === 'ej2-ng-samples' ? 'angular-samples' : 'samples';
    fs.writeFileSync('./gulpfile.js', fs.readFileSync(__dirname + '/../github/' + samples + '.js', 'utf8'));
    fs.writeFileSync('./package.json', JSON.stringify(packageJson, null, '\t'));
    shelljs.cd('../');
}

gulp.task('publish-coverage', function (done) {
    if (!common.isMasterBranch || !fs.existsSync('./coverage/')) {
        done();
        return;
    }
    var coverage = calculateCoverage();
    var coveragesvg = createSVG('coverage', coverage, coverage > 90);
    fs.writeFileSync('./coverage/headlesschrome/lcov-report/coverage.svg', coveragesvg);
    var location = `coverage/${common.currentPackage}`;
    var destpath = './coverage-cdn';
    gulp.src(['./coverage/headlesschrome/lcov-report/**'])
        .pipe(gzip({ append: false }))
        .pipe(gulp.dest(destpath))
        .on('end', function () {
            cdn.publish(destpath, true, location, done);
        })
        .on('error', function (e) {
            done(e);
        });
});
