'use strict';
const Generator = require('yeoman-generator');
const mkdirp = require('mkdirp');

module.exports = class extends Generator {
    constructor(args, opts) {
        super(args, opts);
        // this.option('babel'); 
    }
    prompting() {
        return this.prompt([{
            type: 'list',
            name: 'bundleconfig',
            message: 'Choose your bundle config',
            //  default: this.appname // Default to current folder name
            choices: [{
                name: 'Webpack',
                value: 'webpack'
            }, {
                name: 'SystemJS',
                value: 'system'
            }],
        }, {
            type: 'checkbox',
            name: 'controls',
            message: 'which controls are would you like to include in this project?',
            choices: [${choiceConfig}]
        }, {
            type: 'list',
            name: 'style',
            message: 'Choose your Style',
            choices: [{
                name: 'CSS',
                value: 'css'
            }, {
                name: 'SCSS',
                value: 'scss'
            }],
        }, {
            type: 'list',
            name: 'theme',
            message: 'Choose your theme',
            choices: [{
                name: 'Material',
                value: 'material'
            }, {
                name: 'Fabric',
                value: 'fabric'
            },{
                name: 'Bootstrap',
                value: 'bootstrap'
            }],
        }, 
        {
            type: 'confirm',
            name: 'runNpm',
            message: 'Would you like to run npm install command',
            default: false            
        }
        ]).then((answers) => {
            this.selectedBundle = answers.bundleconfig;
            this.selectedControls = answers.controls;
            this.selectedStyle = answers.style;
            this.selectedTheme = answers.theme;            
            this.runNpm = answers.runNpm;
        });
    }
    writing() {
        this._createGulpfile();
        this._createJSONConfig();        
        this._createThemeFile();
        this._createBundleConfig();
        this._createFolders();
        this._createTsFile();
        this._createTestFiles();
        this._createHtmlFile();
        this._createReadmeFile();
        if (this.runNpm)
            this.npmInstall();
    }
    _createFolders() {
        mkdirp.sync('./app');
        mkdirp.sync('./e2e');
        mkdirp.sync('./src');
        mkdirp.sync('./styles');
    }
    //Creates package.json and tsconfig.json
    _createJSONConfig() {
        this.fs.copyTpl(
            this.templatePath('*.json'),// from app/templates
            this.destinationPath(''), //outer root
            {
                controls: this.selectedControls,                
                selectedBundle: this.selectedBundle
            }
        );
    }
    _createGulpfile() {
        this.fs.copyTpl(
            this.templatePath('gulpfile.js'),// from app/templates
            this.destinationPath('gulpfile.js'),
            {
                bundlePack: this.selectedBundle
            }
        );
    }
    _createTsFile() {
        this.fs.copyTpl(
            this.templatePath('*.ts'),// from app/templates
            this.destinationPath('src/')           
        );
    }
    _createBundleConfig() {
        var selectedBundleConfig = this.selectedBundle + '.config.js',
            dest = selectedBundleConfig === 'webpack.config.js' ? selectedBundleConfig : 'src/' + selectedBundleConfig;
        this.fs.copyTpl(
            this.templatePath(selectedBundleConfig),// from app/templates            
            this.destinationPath(dest),
            {
                controls: this.selectedControls,                
            }
        )
        if (this.selectedBundle === 'system') {
            this.fs.copyTpl(
                this.templatePath('.gitignore'),// from app/templates
                this.destinationPath('.gitignore')
            )
        }
    }
    _createHtmlFile() {
        this.fs.copyTpl(
            this.templatePath('index.html'),// from app/templates
            this.destinationPath('index.html'),
            {
                bundlePack: this.selectedBundle
            }
        )
    }
    _createThemeFile() {
        this.fs.copyTpl(
            this.templatePath(this.selectedTheme + '.' + this.selectedStyle),// from app/templates
            this.destinationPath('styles/' + this.selectedTheme + '.' + this.selectedStyle),
            {
                controls: this.selectedControls
            }
        )
    }
    _createReadmeFile() {
        this.fs.copyTpl(
            this.templatePath('README.md'),// from app/templates
            this.destinationPath('README.md')
        )
         //copy license file
        this.fs.copyTpl(
            this.templatePath('license'),// from app/templates
            this.destinationPath('license')
        )
    }
    _createTestFiles() {
        this.fs.copyTpl(
            this.templatePath('protractor.conf.js'),// from app/templates
            this.destinationPath('e2e/protractor.conf.js')
        );  
        this.fs.copyTpl(
            this.templatePath('index.spec.js'),// from app/templates
            this.destinationPath('e2e/index.spec.js')
        );   
    }
    // install() {
    //     this.installDependencies({
    //         npm: true,
    //     });
    // }
};
