'use strict';

var fs = global.fs = global.fs || require('fs');
var gulp = global.gulp = global.gulp || require('gulp');
var path = global.path = global.path || require('path');
var common = global.config = global.config || require('../utils/common.js');
var config = common.config();
var build = require('../tasks/build.js');

gulp.task('publish-resources', function (done) {
    if (!fs.existsSync('./styles/')) {
        done();
        return;
    }
    var shelljs = global.shelljs = global.shelljs || require('shelljs');
    shelljs.rm('-rf', './ej2-resources');
    var branchName = common.isMasterBranch ? 'master' : common.stagingBranch;
    var simpleGit = require('simple-git');
    if (!fs.existsSync('./ej2-resources')) {
        fs.mkdirSync('./ej2-resources');

        // clone components repository  
        var user = process.env.GITLAB_USER;
        var token = process.env.GITLAB_TOKEN;
        var ej2Resources = 'https://' + user + ':' + token + '@gitlab.syncfusion.com/essential-studio/ej2-resources.git';
        simpleGit().clone(ej2Resources, './ej2-resources', function (err) {
            if (err) {
                done(err);
                return;
            }
        }).exec(function () {
            simpleGit('./ej2-resources').checkout(branchName, function (err) {
                if (err) {
                    done(err);
                    return;
                }

                //CRG Resources

                var dynamicModules = {};
                var dComps = [];
                if (fs.existsSync('./third-party/config.json')) {
                    var dynamicComps = JSON.parse(fs.readFileSync('./third-party/config.json', 'utf8')).components;
                    for (var dynamicComp of dynamicComps) {
                        var baseClass = dynamicComp.baseClass;
                        if (baseClass && dynamicComp.dynamicModules) {
                            dComps.push(baseClass);
                            dynamicModules[baseClass] = dynamicComp.dynamicModules;
                        }
                    }
                }

                var dependables = config.dependable;
                var resources = {};
                if (dependables) {
                    if (fs.existsSync('./ej2-resources/resources.json')) {
                        resources = JSON.parse(fs.readFileSync('./ej2-resources/resources.json'));
                    }
                    var depComps = Object.keys(dependables);
                    for (var depComp of depComps) {
                        var comp = dependables[depComp];
                        comp.package = common.currentPackage;
                        if (dComps.indexOf(comp.classname) !== -1) {
                            comp.injectables = dynamicModules[comp.classname];
                        }
                        resources[depComp] = comp;
                    }
                    fs.writeFileSync('./ej2-resources/resources.json', JSON.stringify(resources), 'utf8');
                }

                shelljs.exec('gulp resource-compile');
                // Generating styles for ej2-resources
                var styleConfig = './styles/*.scss';
                var ignoreConfig = './styles/**/_*.scss';
                if (config.styleDependency !== 'none' && config.styleDependency.length) {
                    styleConfig = './styles/**/*.scss';
                    ignoreConfig = ['./styles/**/_*.scss', './styles/*.scss'];
                }

                var packageName = common.currentPackage.replace('ej2-', '');
                var glob = global.glob = global.glob || require('glob');
                var styleFiles = glob.sync('./styles/**/*.scss', { ignore: ignoreConfig });
                var resourcePath = './ej2-resources/styles/' + common.currentPackage.replace('ej2-', '') + '/';
                shelljs.mkdir('-p', resourcePath);
                for (var i = 0; i < styleFiles.length; i++) {
                    var styles = getStyles(styleFiles[i]);
                    var destPath = '';
                    if (config.styleDependency.length) {
                        var dirName = path.dirname(styleFiles[i]);
                        var dirSplitted = dirName.split('/');
                        var component = dirSplitted[dirSplitted.length - 1];
                        shelljs.mkdir('-p', resourcePath + component);
                        destPath = resourcePath + component + '/' + path.basename(styleFiles[i]);
                    } else {
                        destPath = resourcePath + path.basename(styleFiles[i]);
                    }
                    fs.writeFileSync(destPath, styles);
                }

                // // Copy ES6 files in the ej2-resources
                // var es6Path = './ej2-resources/src/' + common.currentPackage.replace('ej2-', '') + '/';
                // var es6DestPath = './dist/es6/' + common.currentPackage + '.es5.js';
                // shelljs.mkdir('-p', es6Path);
                // if (fs.existsSync(es6DestPath)) {
                //     shelljs.cp('-f', es6DestPath, es6Path + common.currentPackage + '.es5.js');
                //     shelljs.cp('-f', es6DestPath, es6Path + common.currentPackage + '.es5.js.map');
                // }

                shelljs.cd('./ej2-resources/');
                var jsonpath = './styles.json';
                var deps = {};
                if (fs.existsSync(jsonpath)) {
                    deps = JSON.parse(fs.readFileSync(jsonpath, 'utf8'));
                }
                deps[packageName] = config.styleDependency;
                fs.writeFileSync(jsonpath, JSON.stringify(deps, null, 4));
                shelljs.exec('git add .', { silent: true });
                var changes = shelljs.exec('git diff ' + branchName).stdout;
                if (!changes.length) {
                    shelljs.cd('../');
                    console.log('There are no changes in ' + common.currentPackage + ' styles');
                    done();
                    return;
                }

                shelljs.cd('../');
                // push updated component src and styles to components repository            
                simpleGit('./ej2-resources').init()
                    .add('./*')
                    .commit(common.currentPackage + ' - styles refreshed in ej2-resources')
                    .pull(branchName)
                    .push(ej2Resources, branchName, function () {
                        console.log(common.currentPackage + ' - styles refreshed in ej2-resources');
                        done();
                    });
            });
        });
    }

});

gulp.task('resource-compile',function(done){
    var tsConfigs = {
        target: 'es5',
        module: 'es6',
        lib: ['es5', 'es6', 'es2015.collection', 'es2015.core', 'dom'],
        types: ['jasmine', 'jasmine-ajax', 'requirejs', 'chai'],
        removeComments: true
    };
    var gulpObj = {
        src: ['./src/**/*.ts', './src/**/*.tsx'],
        dest: './ej2-resources/scripts/' + common.currentPackage + '/',
        base: 'src'
    };
    build.compileTSFiles(tsConfigs, gulpObj, done);
});
function getStyles(filePath) {
    var styles = '';
    var styleContent = fs.readFileSync(filePath, 'utf8');
    var regex = new RegExp('@import \'(.*).scss\';', 'g');
    var importedStyles = styleContent.match(regex);
    for (var i = 0; i < importedStyles.length; i++) {
        var importedFile = importedStyles[i].replace('@import \'', '').replace('\';', '');
        if (importedFile.startsWith('ej2-') || importedFile.startsWith('../')) {
            continue;
        }
        var dirName = path.dirname(filePath) + '/';
        if (!fs.existsSync(dirName + importedFile)) {
            var splitted = importedFile.split('/');
            var lastIndex = splitted.length - 1;
            splitted[lastIndex] = '_' + splitted[lastIndex];
            importedFile = splitted.join('/');
        }
        var importedPath = dirName + importedFile;
        var depImported = fs.readFileSync(importedPath, 'utf8').trim();
        if (depImported.match(regex)) {
            depImported = getStyles(dirName + importedFile);
        }
        styles += '\n' + depImported;
    }
    return styles;
}