'use strict';

var common = require('../utils/common');
var build = require('../tasks/build.js');
var publish = require('../publish/base.js');
var gulp = global.gulp = global.gulp || require('gulp');
var fs = global.fs = global.fs || require('fs');
var shelljs = global.shelljs = global.shelljs || require('shelljs');
var src = ['./src/**/*.ts', './src/**/*.tsx'];

var rollup = require('rollup'); // jshint ignore:line
var rollupUglify = require('rollup-plugin-uglify');
var rollupCommonjs = require('rollup-plugin-commonjs');
var rollupResolve = require('rollup-plugin-node-resolve');
var rollupSourcemaps = require('rollup-plugin-sourcemaps');
var rollupUglifyEs = require('rollup-plugin-uglify-es');

/* jshint ignore:start */
gulp.task('esm5-scripts', async function () {
    var bObj = distScripts('esm5');
    var bundle = await rollup.rollup(bObj[0]);
    await bundle.write(bObj[1]);
});

gulp.task('esm2015-scripts', async function () {
    var bObj = distScripts('esm2015');
    var bundle = await rollup.rollup(bObj[0]);
    await bundle.write(bObj[1]);
});
/* jshint ignore:end */

gulp.task('esm-scripts', function (done) {
    var runSequence = global.runSequence = global.runSequence || require('run-sequence');
    runSequence('esm5-scripts', 'esm2015-scripts', done);
});

/* jshint ignore:start */
gulp.task('global-scripts', async function () {
    shelljs.rm('-rf', './src/global.ts');
    var bObj = distScripts('global');
    var bundle = await rollup.rollup(bObj[0]);
    await bundle.write(bObj[1]);
    indexGenerator();
});

gulp.task('umd-scripts', async function () {
    var bObj = distScripts('umd');
    var bundle = await rollup.rollup(bObj[0]);
    await bundle.write(bObj[1]);
});
/* jshint ignore:end */

gulp.task('rm-temp', function () {
    shelljs.rm('-rf', './dist/src');
});

gulp.task('es5-scripts', function (done) {
    globalTsGenerator();
    esScripts('es5', done);
});

gulp.task('es6-scripts', function (done) {
    esScripts('es6', done);
});

gulp.task('es-scripts', function (done) {
    var runSequence = global.runSequence = global.runSequence || require('run-sequence');
    runSequence('es5-scripts', 'es6-scripts', done);
});

/**
 * Ship typescript source files for dedupe detection
 */
gulp.task('ship-ts', function () {
    return publish.shipSrc('./src/**/*.{ts,tsx}', './dist/ts/', ['./src/**/*.d.ts', './**/index.ts']);
});

/**
 * Set license details in the dist files
 */
gulp.task('license', function () {
    var fs = global.fs = global.fs || require('fs');
    var path = global.path = global.path || require('path');
    var glob = global.glob = global.glob || require('glob');
    var files = glob.sync('./dist/**/*', { ignore: '{./dist/ts/**/*,./dist/es6/**/*,./dist/**/*.map}' });
    var license = fs.readFileSync(__dirname + '/../utils/license', 'utf8');
    var version = common.currentVersion;
    license = license.replace('{{version}}', version);
    for (var i = 0; i < files.length; i++) {
        if (path.extname(files[i]).length) {
            var licenseContent = license.replace('{{filename}}', path.basename(files[i]));
            licenseContent += fs.readFileSync(files[i]);
            fs.writeFileSync(files[i], licenseContent);
        }
    }
});

//adding @__PURE__ comment for webpack bundling 
gulp.task('add-pure-webpack', function () {
    var path = require('path');
    var filePath = `./dist/es6/${common.currentPackage}.es5.js`;
    if (!fs.existsSync(path.resolve(filePath))) {
        return;
    }
    var es5Content = fs.readFileSync(filePath, 'utf-8');
    es5Content = es5Content.replace(/@class/g, '@__PURE__ @class');
    fs.writeFileSync(filePath, es5Content, 'utf-8');
});

gulp.task('dist-scripts', function (done) {
    var runSequence = global.runSequence = global.runSequence || require('run-sequence');
    runSequence('ship-ts', 'es-scripts', 'esm-scripts', 'global-scripts', 'umd-scripts', 'rm-temp', 'add-pure-webpack', done);
});

gulp.task('release-scripts', function (done) {
    var runSequence = global.runSequence = global.runSequence || require('run-sequence');
    runSequence('dist-scripts', 'license', done);
});

function esScripts(sModule, done) {
    var tsConfigs = {
        target: sModule,
        module: 'es6',
        lib: ['es5', 'es6', 'es2015.collection', 'es2015.core', 'dom'],
        types: ['jasmine', 'jasmine-ajax', 'requirejs', 'chai'],
        removeComments: false
    };
    var gulpObj = {
        src: src,
        dest: './dist/src/' + sModule,
        base: 'src'
    };
    build.compileTSFiles(tsConfigs, gulpObj, done);
}

function distScripts(scripts) { // jshint ignore:line
    var fileExt = {
        esm5: '.es5',
        esm2015: '.es2015',
        umd: '.umd.min',
        global: '.min'
    };
    var format = {
        umd: 'umd',
        global: 'iife',
        esm5: 'es',
        esm2015: 'es'
    };
    var input = scripts === 'esm2015' ? 'es6' : 'es5';
    var umd = scripts === 'umd';
    var global = scripts === 'global';
    var dir = global ? 'global' : 'es6';
    var file = (umd ? 'dist/' : 'dist/' + dir + '/') + common.currentPackage + fileExt[scripts] + '.js';
    var writeObj = {
        file: file,
        format: format[scripts],
        sourcemap: true
    };
    var bundleObj = {
        input: './dist/src/' + input + '/' + (global ? 'global' : 'index') + '.js',
        plugins: [
            rollupSourcemaps(),
            rollupCommonjs()
        ]
    };
    if (umd || global) {
        writeObj.name = 'ej';
        if (global) {
            writeObj.name = 'ej';
            bundleObj.plugins = bundleObj.plugins.concat(rollupResolve());
            bundleObj.plugins = bundleObj.plugins.concat(rollupUglifyEs());
        } else {
            bundleObj.plugins = bundleObj.plugins.concat(rollupUglify());
        }
    }
    return [bundleObj, writeObj];
}

function indexGenerator() { // jshint ignore:line
    var name = common.currentPackage.replace('ej2-', '');
    var nameSpace = name.replace(/-/g, '');
    var importStats = 'import * as _' + nameSpace + ' from \'@syncfusion\/ej2-' + name + '\';';
    var exportStats = '\n\nexport declare namespace ej {\n    const ' + nameSpace + ': typeof _' + nameSpace + ';';
    var deps = JSON.parse(fs.readFileSync('package.json', 'utf8')).dependencies;
    var dNameSpace;
    if (deps) {
        var dNames = Object.keys(deps);
        for (var dName of dNames) {
            if (dName.indexOf('@syncfusion/') !== -1) {
                dNameSpace = dName.replace('@syncfusion/ej2-', '').replace(/-/g, '');
                importStats += '\nimport * as _' + dNameSpace + ' from \'' + dName + '\';';
                exportStats += '\n    const ' + dNameSpace + ': typeof _' + dNameSpace + ';';
            }
        }
    }
    exportStats += '\n}\n';
    fs.writeFileSync('./dist/global/index.d.ts', importStats + exportStats, 'utf8');
}

function globalTsGenerator() {
    var name = common.currentPackage.replace('ej2-', '').replace(/-/g, '');
    var imports = 'import * as ' + name + ' from \'./index\';';
    var content = '\nexport { ' + name;
    var dependencies = JSON.parse(fs.readFileSync('package.json', 'utf8')).dependencies;
    var dNameSpace;
    if (dependencies) {
        var dNames = Object.keys(dependencies);
        for (var dName of dNames) {
            if (dName.indexOf('@syncfusion/') !== -1) {
                dNameSpace = dName.replace('@syncfusion/ej2-', '').replace(/-/g, '');
                imports += '\nimport * as ' + dNameSpace + ' from \'' + dName + '\';';
                content += ', ' + dNameSpace;
            }
        }
    }
    fs.writeFileSync('./src/global.ts', imports + content + ' };\n');
}