'use strict';

// Node JS global scope
var gulp = global.gulp = global.gulp || require('gulp');
global.config = global.config || require('../utils/common.js');
var path = global.path = global.path || require('path');

var service, proxyPort;
var config = global.config.config();
/**
 * Generates code coverage report in folder coverage/
 */
gulp.task('service', function(done) {
    var spawn = require('child_process').spawn;
    service = spawn('node', [path.join(__dirname, '../../services/V4service.js')]);

    service.stdout.on('data', (data) => {
        proxyPort = data.toString().trim();
        console.log('Proxy port: ' + proxyPort);
        done();
    });
});

gulp.task('coverage', ['service'], function(done) {
    var karma = require('karma');
    return new karma.Server({
        configFile: __dirname + config.karma,
        action: 'run',
        singleRun: true,
        preprocessors: config.karmaPreprocess,
        genericPreprocessor: {
            rules: [{
                process: function(content, file, done) {
                    //ignore the typescript generator processors
                    var ignoreNext = ['var __decorate =', 'var __metadata =', 'var __extends ='];
                    for (var j = 0; j < ignoreNext.length; j++) {
                        var regX = new RegExp(ignoreNext[j], 'g');
                        if (regX.test(content)) {
                            content = content.replace(regX, '/* istanbul ignore next */ \n' + ignoreNext[j]);
                        }
                    }
                    done(content);
                }
            }]
        },
        reporters: ['progress', 'coverage'],
        coverageReporter: {
            dir: './coverage',
            subdir: function(browser) {
                return browser.toLowerCase().split(/[ /-]/)[0];
            },
            reporters: [
                { type: 'lcov' },
                { type: 'text-summary', subdir: '.', file: 'report.txt' }
            ],
            check: {
                each: {
                    statements: 90,
                    branches: 90,
                    functions: 100,
                    lines: 90,
                    overrides: config.coverageConfig
                }
            }
        },
        proxies: {
            '/api': {
                'target': 'http://127.0.0.1:' + proxyPort
            }
        },
        // browsers: ['ChromeHeadless'],
        browsers: ['ChromeNoSandbox'],
        customLaunchers: {
            ChromeNoSandbox: {
                base: 'ChromeHeadless',
                flags: ['--no-sandbox']
            }
        },
        browserNoActivityTimeout: 30000
    }, function(e) {
        service.kill();
        if (e === 1) {
            console.log('Karma has exited with ' + e);
            process.exit(e);
        } else {
            done();
        }
    }).start();
});

gulp.task('karma-coverage', ['scripts', 'service'], function(done) {
    var karma = require('karma');
    return new karma.Server({
        configFile: __dirname + config.karma,
        action: 'run',
        singleRun: true,
        reporters: ['progress', 'karma-typescript'],
        karmaTypescriptConfig: {
            tsconfig: './tsconfig.json',
            compilerOptions: {
                emitDecoratorMetadata: true,
                experimentalDecorators: true,
                module: 'commonjs',
                sourceMap: true,
                target: 'ES5'
            },
            exclude: ['node_modules'],
            reports: {
                'html': {
                    'directory': 'karma-coverage',
                    'filename': 'lcov-report',
                    'subdirectory': 'headlesschrome'
                },
                'text-summary': {
                    'directory': 'karma-coverage',
                    'subdirectory': '.',
                    'filename': 'report.txt',
                }
            },
            coverageOptions: {
                threshold: {
                    file: {
                        statements: 90,
                        branches: 80,
                        functions: 100,
                        lines: 90,
                    }
                }
            }
        },
        browsers: ['ChromeNoSandbox'],
        customLaunchers: {
            ChromeNoSandbox: {
                base: 'ChromeHeadless',
                flags: ['--no-sandbox']
            }
        },
        browserNoActivityTimeout: 30000
    }, function(er) {
        service.kill();
        if (er === 1) {
            console.log('Karma has exited with ' + er);
            process.exit(er);
        } else { done(); }
    }).start();
});