'use strict';

var gulp = global.gulp = global.gulp || require('gulp');
var common = global.config = global.config || require('../utils/common.js');
var runSequence = global.runSequence = global.runSequence || require('run-sequence');
var fs = global.fs = global.fs || require('fs');
var config = common.config();
var changelogObj = require('../../src/third-party/changelog.js');

gulp.task('ng-checkout', function (done) {
    common.checkout('ng', 'angular', done);
});


gulp.task('aot-scripts', function (done) {
    var build = require('../tasks/build');
    var tsConfigs = {
        module: 'amd'
    };
    var gulpObj = {
        src: config.ts,
        dest: './aot/amd',
        base: '.'
    };
    return build.compileTSFiles(tsConfigs, gulpObj, done);
});


gulp.task('ng-generate', function (done) {
    var shelljs = global.shelljs = global.shelljs || require('shelljs');
    var srcGen = require('../third-party/angular/src-generator.js');
    var propGen = require('../third-party/shared/property-reader');
    var propCollection = propGen(JSON.parse(fs.readFileSync('./public/api/file.json')));
    shelljs.cp('./third-party/readme/angular.md', './third-party/angular/ReadMe.md');
    if (fs.existsSync('./CHANGELOG.md')) {
        var mdContent = changelogObj.changelog('./CHANGELOG.md', './third-party/changelog/angular.md');
        fs.writeFileSync('./third-party/angular/CHANGELOG.md', mdContent);
    }
    srcGen(JSON.parse(fs.readFileSync('./third-party/config.json')), propCollection, done);
});

gulp.task('ng-configure', function () {
    common.thridPartyConfigure('angular', 'ng');
});

gulp.task('ng-build', function (done) {
    runSequence('ng-checkout', 'ng-configure', 'ng-generate', done);
});