var fs = require('fs');
var path = require('path');
var glob = require('glob');
var samplejson = glob.sync('./samples/**/**/index.html', { silent: true });
var shelljs = require('shelljs');

var common = global.config = global.config || require('../node_modules/@syncfusion/ej2-build/src/utils/common.js');

if (browser && common.currentRepo !== 'ej2-ng-samples') {
    browser.ignoreSynchronization = true;
    browser.waitForAngularEnabled(false);
}

describe('Essential JS 2 Plunker Samples', function () {
    samplejson.forEach((sampleLocation) => {
        if (common.currentRepo === 'ej2-javascript-samples') {
            jsPlnkrTest(sampleLocation);
        } else {
            tsPlnkrTest(sampleLocation);
        }
    });
});

function jsPlnkrTest(sampleLocation) {
    var samplePath = sampleLocation.replace('./', '');
    it('Preview Sample : ' + samplePath, function (done) {
        browser.get('http://localhost:6565/' + samplePath)
            .then(function () {
                browser.manage().logs().get('browser')
                    .then(function (browserLog) {
                        var consoleError = false,
                            errors = [];
                        for (var k = 0; k < browserLog.length; k++) {
                            if (browserLog[k].level.name === 'SEVERE') {
                                consoleError = true;
                                errors.push(browserLog[k].message);
                            }
                        }

                        var sampleInfo = samplePath.split('/');
                        var componentName = sampleInfo[2];
                        var sampleName = samplePath.replace('samples/' + componentName + '/', '').replace('/index.html', '');
                        if (errors.length) {
                            var report = '\n*******************************************************\n' + 'Component Name : ' + componentName +
                                ' - Sample Name : ' + sampleName + '\n' + 'Console Error: \n' + errors.toString().replace(/,/g, '\n\n') +
                                '\n*******************************************************\n\n';
                            console.log(report);
                            fs.appendFileSync('./e2e-reports.txt', report);
                        } else {
                            console.log(samplePath);
                        }
                        expect(consoleError).toBe(false);
                        done();
                    })
                    .catch(function () {
                        var consoleReport = '\n*******************************************************\n' + 'Component Name : ' + componentName +
                            ' - Sample Name : ' + sampleName + '\n' + err +
                            '\n*******************************************************\n\n';
                        console.log(consoleReport);
                        fs.appendFileSync('./e2e-reports.txt', consoleReport);
                        done();
                    });
            });
    });

}

function tsPlnkrTest(sampleLocation) {
    var samplePath = sampleLocation.replace('./', '');
    it('Preview Sample : ' + samplePath, function (done) {
        browser.get('http://localhost:6565/' + samplePath).then(function () {
            // create a mock system import to get the sample rendered
            var systemConfig = getSystemConfig(sampleLocation);
            var importModule = `
            var callback = arguments[arguments.length - 1];
            System.import(${systemConfig.imported}).then(function(result){
                ${systemConfig.thenFn}
                callback();
            }).catch(function(){
                callback();
            });`;
            browser.executeAsyncScript(importModule).then(function () {
                browser.manage().logs().get('browser').then(function (browserLog) {
                    var consoleError = false,
                        errors = [];
                    for (var k = 0; k < browserLog.length; k++) {
                        if (browserLog[k].level.name === 'SEVERE') {
                            consoleError = true;
                            errors.push(browserLog[k].message);
                        }
                    }

                    var sampleInfo = samplePath.split('/');
                    var componentName = sampleInfo[2];
                    var sampleName = samplePath.replace('samples/' + componentName + '/', '').replace('/index.html', '');
                    if (errors.length) {
                        var report = '\n*******************************************************\n' + 'Component Name : ' + componentName +
                            ' - Sample Name : ' + sampleName + '\n' + 'Console Error: \n' + errors.toString().replace(/,/g, '\n\n') +
                            '\n*******************************************************\n\n';
                        console.log(report);
                        fs.appendFileSync('./e2e-reports.txt', report);
                    } else {
                        console.log(samplePath);
                    }
                    expect(consoleError).toBe(false);
                    done();
                });
            }).catch(function (err) {
                var consoleReport = '\n*******************************************************\n' + 'Component Name : ' + componentName +
                    ' - Sample Name : ' + sampleName + '\n' + err +
                    '\n*******************************************************\n\n';
                console.log(consoleReport);
                fs.appendFileSync('./e2e-reports.txt', consoleReport);
                done();
            });
        });
    });

}

function getSystemConfig(samplePath) {
    var systemConfig = fs.readFileSync('./src/sys.js', 'utf8');
    var imported = systemConfig.match('System.import\\((.*?)\\)');
    var trimed = systemConfig.replace(/ /g, '').replace(/\n/g, '');
    var thenFn = trimed.match('then\\(function\\(\\)\\{(.*?)\\}');
    return {
        imported: imported[1],
        thenFn: thenFn && thenFn[1] ? thenFn[1] : ''
    };
}