var fs = require('fs');
var protractor = require('protractor');
var browser = protractor.browser;
var element = protractor.element;
var ExpectedConditions = protractor.ExpectedConditions;
var by = protractor.by;
var common = global.config = global.config || require('../node_modules/@syncfusion/ej2-build/src/utils/common.js');

var navBtnClass = '.btn.btn-default.e-icon-next.e-icons.e-disabled';
var BrowserLink = 'http://localhost:6565/'
if (browser && common.currentRepo !== 'ej2-ng-samples') {
    browser.ignoreSynchronization = true;
    browser.waitForAngularEnabled(false);
}
if (common.currentRepo === 'ej2-ng-samples') {
    navBtnClass = '.nav-btn.e-disabled';
}
else {
    navBtnClass = '.sb-navigation-next.e-disabled';
}
describe('EJ2 Sample browser Testing', function () {
    beforeEach(function () {
        jasmine.DEFAULT_TIMEOUT_INTERVAL = 1000000;
        browser.get(BrowserLink);
    });
    it('Main Samples', function (done) {
        var nextSample = function () {
            var button = element(by.id('next-sample'));
            var loading = element.all(by.className('sb-loading')).first();;
            element(by.css(navBtnClass)).isPresent().then(function (isPresent) {
                if (isPresent) {
                    done();
                } else {
                    browser.wait(ExpectedConditions.invisibilityOf(loading), 300000).then(function () {
                        browser.actions().mouseMove(button).click().perform().then(function () {
                            element(by.css('.error-content')).isPresent().then(function(ispresent){
                                    expect(ispresent).toBe(false);
                                }).catch(function(err){
                                    console.log(err);
                                });
                            browser.getCurrentUrl().then(function (currentUrl) {
                                browser.manage().logs().get('browser').then(function (browserLog) {
                                    var splitFormat = currentUrl.indexOf('#/material/') !== -1 ? '#/material/' : '#/';
                                    var sampleName = currentUrl.split(splitFormat)[1];
                                    var consoleError = false,
                                        errors = [];
                                    for (var k = 0; k < browserLog.length; k++) {
                                        if (browserLog[k].level.name === 'SEVERE') {
                                            consoleError = true;
                                            errors.push(browserLog[k].message);
                                        }
                                    }
                                    if (errors.length) {
                                        var splitted = sampleName.split('/');
                                        var report = '\n*******************************************************\n' +
                                            'Component Name : ' + splitted[0] + ' - Sample Name : ' + splitted[1] + '\n' +
                                            'Console Error: \n' + errors.toString().replace(/,/g, '\n\n') +
                                            '\n*******************************************************\n\n';
                                        console.log(report);
                                        fs.appendFileSync('./e2e-reports.txt', report);
                                    } else {
                                        console.log(sampleName);
                                    }

                                    expect(consoleError).toBe(false);
                                    nextSample();
                                });
                            });
                        });
                    }).catch(function(err){
                        browser.getCurrentUrl().then(function (currentUrl) {
                             var splitFormat = currentUrl.indexOf('#/material/') !== -1 ? '#/material/' : '#/';
                             var sampleName = currentUrl.split(splitFormat)[1];
                             console.log('error' + sampleName + err);
                        });
                    });
                }
            });
        };
        nextSample();
    });

});