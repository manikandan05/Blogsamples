'use strict';

var fs = global.fs = global.fs || require('fs');
var gulp = global.gulp = global.gulp || require('gulp');
var shelljs = global.shelljs = global.shelljs || require('shelljs');
var common = global.config = global.config || require('../utils/common.js');

/**
 * remote development registry
 */
gulp.task('dev-registry', function () {
    switchRegistry('http:' + process.env.PRIVATE_DEV_REGISTRY);
    npmrcConfig(process.env.PRIVATE_DEV_REGISTRY);
});

/**
 * local development registry
 */
gulp.task('local-dev-registry', function () {
    switchRegistry('http:' + process.env.LOCAL_DEV_REGISTRY);
});

/**
 * remote production registry
 */
gulp.task('production-registry', function () {
    switchRegistry('http:' + process.env.PRIVATE_PRODUCTION_REGISTRY);
    npmrcConfig(process.env.PRIVATE_PRODUCTION_REGISTRY);
});

/**
 * local production registry
 */
gulp.task('local-production-registry', function () {
    switchRegistry('http:' + process.env.LOCAL_PRODUCTION_REGISTRY);
});

// Change registry in npmrc file
function switchRegistry(registry) {
    var content = 'registry=https://registry.npmjs.org/\n@syncfusion:registry=' + registry + '\n';
    fs.writeFileSync('./.npmrc', content);
}
exports.switchRegistry = switchRegistry;

/**
 * Rewrite npmrc config
 */
function npmrcConfig(registry) {
    shelljs.exec('echo ' + registry + ':username=' + process.env.PRIVATE_NPM_USER + ' >> .npmrc', { silent: true });
    shelljs.exec('echo ' + registry + ':_password=' + process.env.PRIVATE_NPM_PASSWORD + ' >> .npmrc', { silent: true });
    shelljs.exec('echo ' + registry + ':email=' + process.env.PRIVATE_NPM_EMAIL + ' >> .npmrc', { silent: true });
    shelljs.exec('echo ' + registry + ':always-auth=true >> .npmrc', { silent: true });
}
exports.npmrcConfig = npmrcConfig;

// update npmrc content
var setNpmrc = function (branchName) {
    var registry;
    var isMaster = common.isMasterBranch || (branchName && branchName === 'master');  
    if (common.isRemoteServer) {
        registry = isMaster ? process.env.PRIVATE_PRODUCTION_REGISTRY : process.env.PRIVATE_DEV_REGISTRY;
    } else {
        registry = isMaster ? process.env.LOCAL_PRODUCTION_REGISTRY : process.env.LOCAL_DEV_REGISTRY;
    }
    var npmrc = 'registry=https://registry.npmjs.org/\n' +
        '@syncfusion:registry=http:' + registry;
    fs.writeFileSync('./.npmrc', npmrc);
};
exports.setNpmrc = setNpmrc;