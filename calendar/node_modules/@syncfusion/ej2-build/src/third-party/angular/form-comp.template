import { Component, ElementRef, ViewContainerRef, ValueProvider, ChangeDetectionStrategy, forwardRef{{queryChild}}{{optionalImport}}{{templateRefImport}} } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { ComponentBase, IComponentBase, applyMixins, PropertyCollectionInfo, FormBase, setValue } from '@syncfusion/ej2-ng-base';
import { {{name}}{{diImports}} } from '{{packagepath}}';
{{templateImport}}
{{queryImports}}

export const inputs: string[] = [{{inputs}}];
export const outputs: string[] = [{{fromEvents}}{{outputs}}];
export const twoWays: string[] = [{{twoways}}];

{{componentComments}}
@Component({
    selector: '{{selector}}',
    inputs: inputs,
    outputs: outputs,
    template: '',
    changeDetection: ChangeDetectionStrategy.OnPush,
    providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => {{name}}Component),
            multi: true
        }
    ],
    queries: {
{{query}}
    }
})
export class {{name}}Component extends {{name}} implements IComponentBase {
{{tagDef}}
{{tagStmt}}
{{twowaysOut}}
{{templateProps}}
    {{fromEventsDeclaration}}
    constructor(private ngEle: ElementRef, private viewContainerRef:ViewContainerRef{{diModules}}) {
        super();
        this.element = this.ngEle.nativeElement;
        this.injectedModules = this.injectedModules || [];
        for (let i: number = 2; i < arguments.length; i++) {
            let injectedObj: Object = arguments[i];
            if (injectedObj) {
                this.injectedModules.push(<Function>injectedObj);
            }
        }
        this.registerEvents(outputs);
        this.addTwoWay.call(this, twoWays);
        setValue('currentInstance', this, this.viewContainerRef);
    }

    public registerOnChange(registerFunction: (_: any) => void): void {
    }

    public registerOnTouched(registerFunction: () => void): void {
    }

    public writeValue(value: any): void {
    }
    
    public setDisabledState(disabled: boolean): void {
    }

    public ngOnInit() {
    }

    public ngAfterViewInit(): void {
    }

    public ngOnDestroy(): void {
    }

    public ngAfterContentChecked(): void {
    }

    public registerEvents: (eventList: string[]) => void;
    public addTwoWay: (propList: string[]) => void;
}

applyMixins({{name}}Component, [ComponentBase, FormBase]);

{{diVariables}}