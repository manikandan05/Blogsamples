'use strict';
var fs = global.fs = global.fs || require('fs');
var shelljs = global.shelljs = global.shelljs || require('shelljs');
var pack = JSON.parse(fs.readFileSync('./third-party/config.json', 'utf8'));

const handledTypes = {
    'string': 'string',
    'bool': 'bool',
    'double': 'double'
};
var handledTypesKeys = Object.keys(handledTypes);
class AspSourceGen {
    constructor(json, propCollection, pJson, done) {
        var propList = this.propertyList = propCollection;
        this.interfaces = propList.interfaces;
        this.classes = propList.allClasses;
        if (json) {
            this.render(json, propList, done);
        }
        return this;
    }

    render(json, propList, done) {
            var files = {};
            for (var i = 0; i < json.components.length; i++) {
                var isLast = i === json.components.length - 1;
                var comp = json.components[i];
                var enums = [];
                this.curProcessingComponent = comp;
                shelljs.rm('-rf', './third-party/asp-core/src/' + comp.baseClass + '/*');
                var cnt = fs.readFileSync(__dirname + '/' + 'component.template').toString();
                var returnVal = this.generateComponent(cnt, propList, comp, json, { enums: enums });
                shelljs.mkdir('-p', './third-party/asp-core/src/' + comp.baseClass);
                files[comp.baseClass] = returnVal;
                fs.writeFileSync('./third-party/asp-core/src/' + '/' + comp.baseClass + '/' + comp.baseClass + '.cs', returnVal);

                var helper = fs.readFileSync(__dirname + '/' + 'helper.template').toString();
                var helperVal = this.generateHelper(helper, comp);
                fs.writeFileSync('./third-party/asp-core/src/' + '/' + comp.baseClass + '/' + comp.baseClass + 'Helper.cs', helperVal);

                var builder = fs.readFileSync(__dirname + '/' + 'builder.template').toString();
                var builderVal = this.generateBuilder(builder, propList, comp);
                if (comp.baseClass === 'MultiLevelCategories') {
                    console.log('a');
                }
                fs.writeFileSync('./third-party/asp-core/src/' + '/' + comp.baseClass + '/' + comp.baseClass + 'Builder.cs', builderVal);

                var childTag = fs.readFileSync(__dirname + '/' + 'collection.template').toString();
                for (var k = 0; comp.tagDirective && k < comp.tagDirective.length; k++) {
                    this.generateCollectionTag(childTag, comp, comp, comp.tagDirective[k], { enums: enums });
                    if (comp.tagDirective[k].tagDirective) {
                        for (var n = 0; n < comp.tagDirective[k].tagDirective.length; n++) {
                            this.generateCollectionTag(childTag, comp, comp.tagDirective[k], comp.tagDirective[k].tagDirective[n],
                                 { enums: enums }, true);
                            if (comp.tagDirective[k].tagDirective[n].tagDirective) {
                                for (var o = 0; o < comp.tagDirective[k].tagDirective[n].tagDirective.length; o++) {
                                    this.generateCollectionTag(
                                        childTag, comp, comp.tagDirective[k].tagDirective[n],
                                        comp.tagDirective[k].tagDirective[n].tagDirective[o], { enums: enums }, true
                                    );
                                }
                            }
                        }
                    }
                }
                var complexTag = fs.readFileSync(__dirname + '/' + 'complex.template').toString();
                if (comp.complexDirective) {
                    for (var l = 0; comp.complexDirective && l < comp.complexDirective.length; l++) {
                        this.generateComplexTag(complexTag, comp, comp, comp.complexDirective[l], { enums: enums });
                        var complexBuilderTag = fs.readFileSync(__dirname + '/' + 'complexbuilder.template').toString();
                        this.generateComplexBuilder(complexBuilderTag, comp, comp, comp.complexDirective[l]);
                    }
                }
                if (isLast) {
                    this.generateEnum(comp, enums);
                    done();
                }
            }
        }
        /* jshint ignore:start */
        // here we have used options parameter
    generateComplexTag(comtag, comp, parent, complexDirective, options) {
            var restrictedChild = [];
            var tag = 'ejs-' + comp.baseClass.toLowerCase();
            comtag = comtag.replace(/{{collectionTagName}}/g, tag);
            comtag = comtag.replace(/{{complexClassName}}/g, comp.baseClass + this.toInitCap(complexDirective.directiveClassName ||
                complexDirective.baseClass));
            comtag = comtag.replace(/{{BaseClass}}/g, this.toInitCap(pack.name));
            comtag = comtag.replace(/{{ParentPropertyName}}/g, this.toInitCap(complexDirective.propertyName));
            comtag = comtag.replace(
                /{{Properties}}/g,
                this.getCollectionClassProperties(
                    comp, parent, complexDirective, { restrictedChild: restrictedChild, enums: options.enums }
                )
            );
            var selector = '"e-' + comp.baseClass.toLowerCase() + '-' + complexDirective.baseClass.toLowerCase() + '",';
            if (complexDirective.SelectorName || complexDirective.selectorName) {
                selector = '"' + (complexDirective.SelectorName || complexDirective.selectorName) + '", ';
            }
            var restChild = this.getRestrictChild(restrictedChild);
            comtag = comtag.replace(/{{RestrictChildren}}/g, restChild);
            comtag = comtag.replace(/{{Selector}}/g, selector);
            if (fs.existsSync('./third-party/asp-core/src/' + '/' + comp.baseClass + '/' + complexDirective.baseClass + '.cs')) {
                var csFile = fs.readFileSync('./third-party/asp-core/src/' + '/' + comp.baseClass + '/' + complexDirective.baseClass + '.cs', 'utf8');
                var value = csFile.match(/\[HtmlTargetElement.*]/g);
                var temp = '[HtmlTargetElement({{Selector}} ParentTag = "{{collectionTagName}}")]';
                temp = temp.replace(/{{collectionTagName}}/g, tag);
                temp = temp.replace(/{{Selector}}/g, selector);
                csFile = csFile.replace(value[0], value[0] + '\n    ' + temp);
                if (value[0].match(/".*,/g)[0].replace(',', '').replace(/"/g, "").split(' ')[0] !==
                    selector.replace(',', '').replace(/"/g, "")) {
                    if (csFile.indexOf('IsComplex') === -1) {
                        var isChild = csFile.match(/protected override bool IsChild .*/g);
                        var isComplex = '        protected override bool IsComplex { get { return true; } }';
                        csFile = csFile.replace(isChild, isChild + '\n' + isComplex);
                        var collectionParent = csFile.match(/\/\/ appendProperrties.*/);
                        var string = 'protected override string ParentPropertyName { get { return "{{parentPropertyName}}"; } }'
                        string = string.replace(/{{parentPropertyName}}/g, selector.replace(',', '').replace(/"/g, '') + '>' + this.toInitCap(complexDirective.propertyName))
                        csFile = csFile.replace(collectionParent, string);
                        fs.writeFileSync('./third-party/asp-core/src/' + '/' + comp.baseClass + '/' + complexDirective.baseClass + '.cs', csFile);
                        return;
                    }
                    var parentValue = csFile.match(/protected override string ParentPropertyName.*/g);
                    parentValue = parentValue[0].match(/".*"/g);
                    var startVal = '';
                    if (!(parentValue[0].startsWith('"e-') || parentValue[0].startsWith('"ejs-'))) {
                        startVal = value[0].match(/".*,/g)[0].replace(',', '') + '>';
                    }
                    var lastval = startVal + parentValue[0] + ',' + selector.replace(',', '') + '>' + this.toInitCap(complexDirective.propertyName);
                    csFile = csFile.replace(parentValue[0], '"' + lastval.replace(/"/g, '') + '"');
                    fs.writeFileSync('./third-party/asp-core/src/' + '/' + comp.baseClass + '/' + complexDirective.baseClass + '.cs', csFile);
                }
            } else {
                fs.writeFileSync('./third-party/asp-core/src/' + '/' + comp.baseClass + '/' + complexDirective.baseClass + '.cs', comtag);
            }
        }
        /* jshint ignore:end */
    generateComponent(cnt, propList, comp, json, options) {
        var element = 'ejs-' + comp.baseClass.toLowerCase();
        var tagName = comp.preferredTag ? comp.preferredTag : 'div';
        var namespace = 'ej.' + json.name.toLowerCase();
        var className = comp.baseClass;
        var restrictedChild = [];
        var enums = options.enums;
        var returnvalue = this.getAllpropertiesFromClass(
            propList[comp.baseClass],
            comp, {
                restrictedChild: restrictedChild,
                enums: enums
            }
        );
        var restChild = this.getRestrictChild(restrictedChild);
        cnt = cnt.replace(/{{elementName}}/g, element);
        cnt = cnt.replace(/{{RestrictChildren}}/g, restChild);
        cnt = cnt.replace(/{{className}}/g, className);
        cnt = cnt.replace(/{{tagName}}/g, tagName);
        cnt = cnt.replace(/{{nameSpace}}/g, namespace);
        cnt = cnt.replace(/{{BaseClass}}/g, this.toInitCap(pack.name));
        cnt = cnt.replace(/{{className}}/g, className);
        cnt = cnt.replace(/{{properties}}/g, returnvalue);
        return cnt;
    }
    generateComplexBuilder(comtag, comp, parent, complexDirective) {

        comtag = comtag.replace(/{{BaseClass}}/g, this.toInitCap(pack.name));
        comtag = comtag.replace(/{{complexClassName}}/g, comp.baseClass + this.toInitCap(complexDirective.directiveClassName ||
            complexDirective.baseClass));
        var prop = this.generateComplexBuilderProperties(comp, complexDirective);
        comtag = comtag.replace(/{{properties}}/g, prop);
        if (fs.existsSync('./third-party/asp-core/src/' + comp.baseClass + '/' + comp.baseClass +
                complexDirective.baseClass + 'Builder.cs')) {
            var builderFile = fs.readFileSync('./third-party/asp-core/src/' + comp.baseClass + '/' + comp.baseClass +
                complexDirective.baseClass + 'Builder.cs', 'utf8');
            var value = builderFile.match(/\/\/complexbuilder/g);
            if (value && value.length) {
                var complexstring = `\n        public {{complexClassName}}Builder({{complexClassName}} model)
        {
                this.model = model;
        } \n`;
                complexstring = complexstring.replace(/{{complexClassName}}/g, comp.baseClass +
                    this.toInitCap(complexDirective.directiveClassName || complexDirective.baseClass));
                builderFile = builderFile.replace(value[0], complexstring);
                fs.writeFileSync('./third-party/asp-core/src/' + comp.baseClass + '/' + comp.baseClass +
                    complexDirective.baseClass + 'Builder.cs', builderFile);
            } else {
                return;
            }
        } else {
            fs.writeFileSync('./third-party/asp-core/src/' + comp.baseClass + '/' + comp.baseClass +
                complexDirective.baseClass + 'Builder.cs', comtag);
        }
    }
    generateHelper(helper, comp) {
        var className = comp.baseClass;
        var objName = className.toLowerCase();
        var comment = '';
        if (comp.comment) {
            comment = '\n        ///<summary>\n        ///' +
                comp.comment.join('\n').replace(/(\/|)(\*)(\/|)|(```[^`]*```)|(\n(\n| ))/g, '').split('\n').join('\n        ///') +
                '\n        ///</summary>';
        }
        helper = helper.replace(/{{comment}}/g, comment);
        helper = helper.replace(/{{BaseClass}}/g,this.toInitCap(pack.name));
        helper = helper.replace(/{{className}}/g, className);
        helper = helper.replace(/{{obj}}/g, objName);
        return helper;
    }

    generateEnum(comp, enums) {
            var helper = fs.readFileSync(__dirname + '/' + 'enumurations.template').toString();
            if (enums.length) {
                var tab = '    ';
                var enumProp = '';
                var newLine = '\n';
                for (var i = 0; i < enums.length; i++) {
                    var curObj = enums[i];
                    var typeName = Object.keys(curObj)[0];
                    enumProp = enumProp + tab + 'public enum ' + this.toInitCap(typeName) + newLine;
                    enumProp = enumProp + tab + '{' + newLine;
                    for (var j = 0; j < curObj[typeName].length; j++) {
                        var value = curObj[typeName];
                        enumProp = enumProp + tab + tab + '[EnumMember(Value = "' + value[j] + '")]' + newLine;
                        enumProp = enumProp + tab + tab + this.toInitCap(value[j].replace(/\s/g, '')) + ',' + newLine;
                    }
                    enumProp = enumProp + tab + '}' + newLine + newLine;
                }
                var packName =  this.toInitCap(pack.name);
                shelljs.mkdir('-p','./third-party/asp-core/src/Enumuration/' + packName);
                helper = helper.replace(/{{className}}/g, this.toInitCap(packName));
                helper = helper.replace(/{{enumurations}}/g, enumProp);
                fs.writeFileSync('./third-party/asp-core/src/Enumuration/' + packName + '/' + packName + 'Enumurations.cs', helper);
            }

        }
        /* jshint ignore:start */
        // here we have used options parameter
    generateCollectionTag(helper, comp, parent, tagDirective, options, isComplexColllection) {
        var restrictedChild = [];
        helper = helper.replace(/{{complexTagName}}/g, this.getTagSelector(parent, tagDirective, isComplexColllection).complexTagName);
        helper = helper.replace(/{{collectionTagName}}/g, this.getTagSelector(parent, tagDirective, isComplexColllection).collectionTagName);
        helper = helper.replace(/{{complexClassName}}/g, comp.baseClass + this.toInitCap(tagDirective.directiveClassName ||
            tagDirective.baseClass));
        helper = helper.replace(/{{BaseClass}}/g, this.toInitCap(pack.name));
        helper = helper.replace(/{{BaseClass}}/g, comp.baseClass);
        helper = helper.replace(/{{collectionClassName}}/g, comp.baseClass +
            this.toInitCap(tagDirective.arrayDirectiveClassName || tagDirective.baseClass + 's'));
        helper = helper.replace(/{{parentPropertyName}}/g, this.getTagSelector(parent, tagDirective, isComplexColllection).collectionTagName + '>' +
            this.toInitCap(tagDirective.propertyName));
        helper = helper.replace(/{{parentTagName}}/g, this.getTagSelector(parent, tagDirective, isComplexColllection).parentTagName);
        helper = helper.replace(
            /{{properties}}/g,
            this.getCollectionClassProperties(
                comp, parent, tagDirective, {
                    restrictedChild: restrictedChild,
                    enums: options.enums
                })
        );
        var restChild = this.getRestrictChild(restrictedChild);
        helper = helper.replace(/{{RestrictChildren}}/g, restChild);
        fs.writeFileSync('./third-party/asp-core/src/' + '/' + comp.baseClass + '/' + tagDirective.baseClass + '.cs', helper);
        this.generateCollectionBuilder(comp, this.propertyList, tagDirective);
    }

    generateCollectionBuilder(comp, propList, currentTagDirective) {
        var builder = fs.readFileSync(__dirname + '/' + 'collectionbuilder.template').toString();
        var className = comp.baseClass + this.toInitCap(currentTagDirective.directiveClassName || currentTagDirective.baseClass);
        var returnvalue = this.generateBuilderProperties(comp, currentTagDirective);
        builder = builder.replace(/{{BaseClass}}/g, this.toInitCap(pack.name));
        builder = builder.replace(/{{className}}/g, className);
        builder = builder.replace(/{{namespaceName}}/g, comp.baseClass);
        builder = builder.replace(/{{builderProperties}}/g, returnvalue);
        fs.writeFileSync('./third-party/asp-core/src/' + comp.baseClass + '/' + comp.baseClass + currentTagDirective.baseClass + 'Builder.cs', builder);
    }

    generateBuilderProperties(comp, tagDirective) {
        var curInterface1 = this.interfaces[tagDirective.baseClass + 'Model'];
        var content = '';
        if (curInterface1) {
            var innerProperties = curInterface1.children;
            for (var k = 0; k < innerProperties.length; k++) {
                var curBuilderProperty = innerProperties[k];
                if (this.isExported(curBuilderProperty)) {
                    var builderPropType = this.getPropertyType(curBuilderProperty, comp, undefined, tagDirective);

                    var curClassName = comp.baseClass + this.toInitCap(tagDirective.directiveClassName || tagDirective.baseClass);
                    var propName = curBuilderProperty.name;
                    if (curBuilderProperty.name === 'readonly') {
                        propName = 'readOnly';
                    }
                    content = content + '        public ' + curClassName + 'Builder ' +
                        this.toInitCap(curBuilderProperty.name) + '(' + builderPropType + ' ' +
                        propName + ')\n' +
                        '        {\n' +
                        '            model.' + this.toInitCap(curBuilderProperty.name) + ' = ' + propName + ';\n' +
                        '            return this;\n' +
                        '        }\n\n';
                }
            }
        }
        return content;
    }
    generateComplexBuilderProperties(comp, tagDirective) {
            var curInterface = this.interfaces[tagDirective.baseClass + 'Model'];
            var content = '';
            if (curInterface) {
                var innerProperties = curInterface.children;
                for (var j = 0; j < innerProperties.length; j++) {
                    var curProperty = innerProperties[j];
                    if (this.isExported(curProperty)) {
                        var builderPropType = this.getPropertyType(curProperty, comp, undefined, tagDirective);

                        var curClassName = comp.baseClass + this.toInitCap(tagDirective.directiveClassName || tagDirective.baseClass);
                        var propName = curProperty.name;
                        if (curProperty.name === 'readonly') {
                            propName = 'readOnly';
                        }
                        content = content + '        public ' + curClassName + 'Builder ' +
                            this.toInitCap(curProperty.name) + '(' + builderPropType + ' ' +
                            'value' + ')\n' +
                            '        {\n' +
                            '            model.' + this.toInitCap(curProperty.name) + ' = ' + 'value' + ';\n' +
                            '            return this;\n' +
                            '        }\n\n';
                        if (curProperty.name === 'dataSource') {
                            content = content +
                                '        public ' + curClassName + 'Builder DataSource(Action<DataManagerBuilder> dataSource)\n' +
                                '        {\n' +
                                '           var resultObject = new DataManager();\n' +
                                '           model.DataSource = resultObject;\n' +
                                '           var builder = new DataManagerBuilder(resultObject);\n' +
                                '           if (dataSource != null)\n' +
                                '               {\n' +
                                '                   dataSource.Invoke(builder);\n' +
                                '               }\n' +
                                '           return this;\n' +
                                '        }\n\n';
                        }
                    }
                }
            }
            return content;
        }
        /* jshint ignore:end */
    getRestrictChild(restrictedChild) {
        var rest = '';
        if (restrictedChild.length) {
            if (restrictedChild.length > 1) {
                rest = ', RestrictChildren("' + restrictedChild.splice(0, 1).toString() +
                    '", new string[] {"' + restrictedChild.join('","') + '"})';
            } else if (restrictedChild.length) {
                rest = ', RestrictChildren("' + restrictedChild.toString() + '")';
            }
        }
        return rest;
    }

    getCollectionClassProperties(comp, parent, tagDirective, options) {
        var curInterface = this.interfaces[tagDirective.baseClass + 'Model'];
        var content = '';
        if (curInterface) {
            var innerProperties = curInterface.children;
            for (var j = 0; j < innerProperties.length; j++) {
                var curProperty = innerProperties[j];
                if (this.isExported(curProperty)) {
                    content = content + this.createPropertySyntax(curProperty, comp, parent, tagDirective, options);
                }
            }
        }
        return content;
    }

    createPropertySyntax(obj, comp, parent, tagDirective, options, comment) {
        var cnt = '';
        var tab = '    ';
        var newLine = '\n';
        if (comment) {
            cnt += comment[obj.name] ? (tab + tab + comment[obj.name].split('\n').join(newLine + tab + tab) + newLine) : cnt;
        }
        var defaultValue = this.getDefaultPropertyValue(obj, comp);
        if (defaultValue !== 'null') {
            cnt = cnt + tab + tab + '[DefaultValue(' + defaultValue + ')]' + newLine;
        }
        cnt = cnt + tab + tab + '[HtmlAttributeName("' + obj.name + '")]' + newLine;
        cnt = cnt + tab + tab + '[JsonProperty("' + obj.name + '")]' + newLine;
        if (obj.kindString === 'Event') {
            cnt = cnt + tab + tab + '[JsonConverter(typeof(EventTypeConverter))]' + newLine;
        } else if (this.isStringLitrals(obj)) {
            cnt = cnt + tab + tab + '[JsonConverter(typeof(StringEnumConverter))]' + newLine;
            this.addEnums(this.propertyList.typeAliases[obj.type.name], comp, cnt, options.enums);
        } else if (obj.name === 'query') {
            cnt = cnt + tab + tab + '[JsonConverter(typeof(QueryTypeConverter))]' + newLine;
        } else if (obj.name === 'dataSource') {
            cnt = cnt + tab + tab + '[JsonConverter(typeof(DataSourceTypeConverter))]' + newLine;
        }
        var pType = 'public ';
        if (obj.name === 'id') {
            pType = 'public override ';
        }
        if (defaultValue !== 'null') {
            cnt = cnt + tab + tab + pType + this.getPropertyType(obj, comp, options, tagDirective) + ' ' +
                this.toInitCap(obj.name) + ' { get; set; } = ' + defaultValue + ';' + newLine + newLine;
        } else {
            cnt = cnt + tab + tab + pType + this.getPropertyType(obj, comp, options, tagDirective) + ' ' +
                this.toInitCap(obj.name) + ' { get; set; }' + newLine + newLine;
        }
        return cnt;
    }

    addEnums(obj, comp, cnt, array) {
        var res = {};
        var values = [];
        for (var i = 0; obj.type && obj.type.types && i < obj.type.types.length; i++) {
            if (obj.type.types[i].value) {
                values.push(this.toInitCap(obj.type.types[i].value));
            }
        }
        if (values.length && !array.filter(function(ob) { return !!ob[obj.name]; }).length) {
            res[obj.name] = values;
            array.push(res);
        }
    }

    isStringLitrals(obj) {
        return !!(this.propertyList.typeAliases[obj.type.name] && this.propertyList.typeAliases[obj.type.name].type &&
            this.propertyList.typeAliases[obj.type.name].type.types);
    }

    getDefaultPropertyValue(obj, comp) {
        var cnt = 'null';
        var curType = this.getPropertyType(obj, comp);
        if (handledTypesKeys.indexOf(curType) !== -1 || this.isStringLitrals(obj)) {
            var cntVal = obj.comment.tags && obj.comment.tags.filter(function(v) { return v.tag === 'default'; })[0].text;
            if (cntVal && !(/undefined|null/g.test(cntVal))) {
                if (curType === 'bool') {
                    cnt = cntVal.replace(/[^\w\s]|\n|/gi, '');
                    return cnt;
                }
                if (curType === 'double') {
                    cnt = parseFloat(cntVal.replace(/\n|\:|\s|\'|/gi, ''));
                    return cnt;
                }
                if (this.isStringLitrals(obj)) {
                    cnt = this.toInitCap(curType) + '.' + this.toInitCap(cntVal.replace(/[^\w\s]|\n|/gi, ''));
                    return cnt;
                }
                if (curType === 'string') { cnt = '"'; }
                cnt = cnt + cntVal.replace(/[^\w\s]|\n|/gi, '');
                if (curType === 'string') { cnt = cnt + '"'; }
            }
        }
        return cnt;
    }

    getHandledPropType(obj) {
        var curType = this.getActualPropType(obj);
        if (handledTypesKeys.indexOf(curType) === -1) {
            curType = 'object';
        }
        return curType;
    }

    getPropertyType(obj, comp, options, tags) {
        var tagDirective = comp.tagDirective;
        var complexDirective = comp.complexDirective;
        var res = 'object';
        var uTypeRegex = /number|Object|Element|HTMLElement|Node/;
        var uStrRegex = /string/;
        if (comp.type === 'container') {
            if (options && options.restrictedChild.indexOf('e-content-template') === -1) {
                options.restrictedChild.push('e-content-template');
            }
        }
        if (obj.name === 'dataSource') {
            if (options && options.restrictedChild.indexOf('e-datamanager') === -1) {
                options.restrictedChild.push('e-datamanager');
            }
        }
        if (tags) {
            if (tags.tagDirective) {
                tagDirective = tags.tagDirective;
            }
            else {
                tagDirective = tags;
            }
        }
        if (tagDirective) {
            for (var i = 0; i < tagDirective.length; i++) {
                if (tagDirective[i].propertyName === obj.name) {
                    res = 'List<' + comp.baseClass + this.toInitCap(tagDirective[i].directiveClassName || tagDirective[i].baseClass) + '>';
                    var ts = this.getTagSelector(comp, tagDirective[i]);
                    if (ts.collectionTagName) {
                        if (options && options.restrictedChild.indexOf(ts.collectionTagName) === -1) {
                            if (tags && !tags.tagDirective || tagDirective[i].aspcoreDirectiveSelector) {
                                options.restrictedChild.push(ts.collectionTagName);
                            } else {
                                options.restrictedChild.push(ts.parentTagName + ts.collectionTagName.replace('e-', '-'));
                            }
                        }
                    }
                    if (tags && tags.tagDirective) {
                        return res;
                    }
                }
            }
        }
        if (complexDirective) {
            for (var j = 0; j < complexDirective.length; j++) {
                if (complexDirective[j].propertyName === obj.name) {
                    res = comp.baseClass + this.toInitCap(complexDirective[j].baseClass);
                    var compplexProp = (complexDirective[j].SelectorName || complexDirective[j].selectorName) || 'e-' +
                        comp.baseClass.toLowerCase() + '-' +
                        complexDirective[j].baseClass.toLowerCase();
                    if (options && options.restrictedChild.indexOf(compplexProp) === -1) {
                        options.restrictedChild.push(compplexProp);
                    }
                    return res;
                }
            }
        }
        if (this.isStringLitrals(obj)) {
            return this.toInitCap(obj.type.name);
        }
        if (obj.type.type === 'union') {
            var objTypes = [];
            for (var obType of obj.type.types) {
                objTypes.push(obType.name);
            }
            if (objTypes.indexOf('Date') !== -1) {
                return 'object';
            }
            if (obj.type.types.length === 2) {
                if (uStrRegex.test(objTypes) && (uTypeRegex.test(objTypes) ||
                        this.propertyList.typeAliases[objTypes[0] || this.propertyList.typeAliases[objTypes[1]]])) {
                    return 'string';
                }
            }
        }
        if (obj.kindString === 'Event') {
            res = 'string';
        } else if (obj.type.name && obj.type.type !== 'reference') {
            res = obj.type.name;
            if (res === 'boolean') {
                res = 'bool';
            } else if (res === 'number') {
                res = 'double';
            }
        } else if (obj.type.type === 'array' && obj.type.elementType && obj.type.elementType.name === 'string') {
            res = 'string[]';
        } else if (obj.type.type === 'array' && obj.type.elementType && obj.type.elementType.name === 'number') {
            res = 'int[]';
        }
        if (obj.name === 'query') {
            res = 'string';
        }
        return res;
    }

    isExported(obj) {
        return obj.flags && obj.flags.isExported;
    }

    getTagSelector(comp, data, isComplexColllection) {
        var complexTagName, collectionTagName, parentTagName;
        if (isComplexColllection || data.aspcoreDirectiveSelector) {
            complexTagName = data.aspcoreDirectiveSelector || data.directiveSelector.split('>')[0] +
                data.directiveSelector.split('>')[data.directiveSelector.split('>').length - 1].replace('e-', '-');
            collectionTagName = data.aspcoreArrayDirectiveSelector || data.arrayDirectiveSelector.split('>')[0] +
                data.arrayDirectiveSelector.split('>')[1].replace('e-', '-');
            if (isComplexColllection) {
                if (comp.baseClass === 'AggregateRow' && comp.directoryName === 'grid') {
                    parentTagName = 'e-grid-aggregate';
                }
                else {
                    parentTagName = comp.aspcoreArrayDirectiveSelector || 'e-' + comp.baseClass.toLowerCase() +
                        data.arrayDirectiveSelector.split('>')[0].replace('e-', '-');
                }
            }
        }
        complexTagName = data.directiveSelector ? complexTagName || data.directiveSelector.split('>')[1] : 'e-' +
            comp.baseClass.toLowerCase() + '-' + data.directiveClassName.toLocaleLowerCase();
        collectionTagName = data.arrayDirectiveSelector ? collectionTagName || data.arrayDirectiveSelector.split('>')[1] : 'e-' +
            comp.baseClass.toLowerCase() + '-' + data.arrayDirectiveClassName.toLowerCase();
        parentTagName = data.arrayDirectiveSelector ? parentTagName || data.arrayDirectiveSelector.split('>')[0].replace('ej','ejs') :
         'ejs-' + comp.baseClass.toLowerCase();
        return { complexTagName: complexTagName, collectionTagName: collectionTagName, parentTagName: parentTagName };
    }

    generateBuilder(builder, propList, comp) {
        var className = comp.baseClass;
        var tag;
        var htmlString = '';
        var mvcTemplate = '';
        var returnvalue = this.getBuilderProperties(propList, comp);
        builder = builder.replace(/{{BaseClass}}/g, this.toInitCap(pack.name));
        builder = builder.replace(/{{className}}/g, className);
        builder = builder.replace(/{{builderProperties}}/g, returnvalue);
        if (comp.type === 'container') {
            htmlString = `\n            this.Output.WriteLine("<` +
                (comp.preferredTag ? comp.preferredTag : 'div') +
                ` id=" + model.Id + ">");
            if (this.contentTemplate.builder != null) {
                this.contentTemplate.builder(this.Context, this.Output);
            }
            this.Output.WriteLine("</` +
                (comp.preferredTag ? comp.preferredTag : 'div') + `>");`;
            mvcTemplate = '\n       private MvcTemplate<object> contentTemplate { get; set; } = new MvcTemplate<object>();';
            builder = builder.replace(/{{defaultTag}}/g, '');
        } else if (comp.defaultTag) {
            if (comp.defaultTag.indexOf('id=')) {
                tag = comp.defaultTag;
                tag = tag.replace(/id='\w*'|id="\w*"/g, 'id =\'" + model.Id + "\'');
            } else {
                tag = comp.defaultTag.replace(/id='\w*'|id="\w*"/g, 'id =\'" + model.Id + "\'');
            }
            tag = tag.replace(/id='\w*'|id="\w*"/g, 'id =\'" + model.Id + "\'');
            builder = builder.replace(/{{defaultTag}}/g, tag);
        } else if (comp.preferredTag) {
            tag = '<' + comp.preferredTag + ' id=" + model.Id + "></' + comp.preferredTag + '>';
            builder = builder.replace(/{{defaultTag}}/g, tag);
        } else {
            tag = '<div id=" + model.Id + "></div>';
            builder = builder.replace(/{{defaultTag}}/g, tag);
        }
        builder = builder.replace(/{{htmlString}}/g, htmlString);
        builder = builder.replace(/{{mvcTemplate}}/g, mvcTemplate);
        return builder;
    }

    getBuilderProperties(propList, comp) {
        var props = propList[comp.baseClass];
        var buildprop = '';
        var restrictedChild = [];
        buildprop = this.getAllPropEvents(props, comp, buildprop, restrictedChild, '_allProperties');
        buildprop = this.getAllPropEvents(props, comp, buildprop, restrictedChild, '_allEvents');
        if (comp.type === 'container') {
            buildprop += `       public ` + comp.baseClass + `Builder ContentTemplate(Func<object, object> template)
        {
            contentTemplate.RazorViewTemplate = template;
            return this;
        }\n`;
        }
        return buildprop;
    }

    getAllPropEvents(props, comp, buildprop, restrictedChild, propEvent) {
        var className = comp.baseClass;
        for (var i = 0; i < props[propEvent].length; i++) {
            var curProperty = props[propEvent][i];
            var classfirst = this.toInitCap(curProperty);


            if (props._propObjects[curProperty]) {
                var boolProp = '';
                var initialProp = this.toInitCap(curProperty);
                var builderPropType = this.getPropertyType(props._propObjects[curProperty], comp, { restrictedChild: restrictedChild });
                if (curProperty === 'checked') {
                    curProperty = 'check';
                } else if (curProperty === 'readonly') {
                    curProperty = 'readOnly';
                }
                if (builderPropType === 'bool') {
                    boolProp = ' = true';
                }
                var shortComments = props[(propEvent === '_allProperties') ? '_propShortComments' : '_eventShortComments'];
                if (shortComments[curProperty]) {
                    buildprop = buildprop + '\n       ' + shortComments[curProperty].split('\n').join('\n       ') + '\n';
                }
                buildprop = buildprop + '\n       public ' + className + 'Builder ' + initialProp + '(' + builderPropType +
                    ' ' + curProperty + boolProp + ')\n' + '       {\n' + '            model.' + classfirst + ' = ' + curProperty + ';\n' +
                    '            return this;\n' + '       }\n\n';
                if (curProperty === 'dataSource') {
                    buildprop = buildprop + '       public ' + className + 'Builder DataSource(Action<DataManagerBuilder> dataSource)\n' +
                        '       {\n' +
                        '           var resultObject = new DataManager();\n' +
                        '           model.DataSource = resultObject;\n' +
                        '           var builder = new DataManagerBuilder(resultObject);\n' +
                        '           if (dataSource != null)\n' +
                        '               {\n' +
                        '                   dataSource.Invoke(builder);\n' +
                        '               }\n' +
                        '           return this;\n' +
                        '       }\n';
                }
                var getBuilder, getComplexBuilder, vClassName;
                /* jshint ignore:start */
                getBuilder = comp.tagDirective &&
                    comp.tagDirective.filter(function(v) { return v.propertyName === curProperty; });
                getComplexBuilder = comp.complexDirective &&
                    comp.complexDirective.filter(function(v) { return v.propertyName === curProperty; });
                /* jshint ignore:end */
                if (getBuilder && getBuilder.length === 1) {
                    if (getBuilder[0]) {
                        vClassName = comp.baseClass + this.toInitCap(getBuilder[0].directiveClassName || getBuilder[0].baseClass);
                        buildprop = buildprop + '       public ' + className + 'Builder ' + initialProp +
                            '(Action<' + vClassName + 'Builder> ' + curProperty + ')\n' +
                            '       {\n' +
                            '           List<' + vClassName + '> result = new List<' + vClassName + '>();\n' +
                            '           model.' + initialProp + ' = result;\n' +
                            '           ' + vClassName + 'Builder builder = new ' + vClassName + 'Builder(result);\n' +
                            '           if (' + curProperty + ' != null)\n' +
                            '               {\n' +
                            '                   ' + curProperty + '.Invoke(builder);\n' +
                            '               }\n' +
                            '           return this;\n' +
                            '       }\n';
                    }
                } else if (getComplexBuilder && getComplexBuilder.length === 1) {
                    if (getComplexBuilder[0]) {
                        vClassName = comp.baseClass + this.toInitCap(getComplexBuilder[0].directiveClassName ||
                            getComplexBuilder[0].baseClass);
                        buildprop = buildprop + '       public ' + className + 'Builder ' + initialProp +
                            '(Action<' + vClassName + 'Builder> ' + curProperty + ')\n' +
                            '       {\n' +
                            '           var modelValue = new ' + vClassName + '();\n' +
                            '           model.' + initialProp + ' = modelValue;\n' +
                            '           var builder = new ' + vClassName + 'Builder(modelValue);\n' +
                            '           if (' + curProperty + ' != null)\n' +
                            '               {\n' +
                            '                   ' + curProperty + '.Invoke(builder);\n' +
                            '               }\n' +
                            '           return this;\n' +
                            '       }\n';
                    }
                }
            }
        }
        return buildprop;
    }

    getAllpropertiesFromClass(propList, comp, options) {
        var props = propList;
        var prop = '';
        for (var i = 0; i < props._allProperties.length; i++) {
            var curProperty = props._allProperties[i];
            if (props._propObjects[curProperty]) {
                prop = prop + this.createPropertySyntax(
                    props._propObjects[curProperty], comp, comp, comp.tagDirective, options, propList._propShortComments);
            }
        }
        for (var j = 0; j < props._allEvents.length; j++) {
            var curEvent = props._allEvents[j];
            if (props[curEvent]) {
                prop = prop + this.createPropertySyntax(
                    props[curEvent].obj, comp, comp, comp.tagDirective, options, propList._propShortComments);
            }
        }
        return prop;
    }

    toInitCap(str) {
        return str.charAt(0).toUpperCase() + str.substr(1);
    }

}

module.exports = function(json, propList, done) {
    var pJson = JSON.parse(fs.readFileSync('./package.json'));
    return new AspSourceGen(json, propList, pJson, done);
};