import { Component, EmitType } from '@syncfusion/ej2-base';
import { INotifyPropertyChanged } from '@syncfusion/ej2-base';
import { ChildProperty } from '@syncfusion/ej2-base';
import { UploaderModel, AsyncSettingsModel, ButtonsPropsModel, FilesPropModel } from './uploader-model';
export declare class FilesProp extends ChildProperty<FilesProp> {
    /**
     * Specifies the name of the file
     * @default ''
     */
    name: string;
    /**
     * Specifies the size of the file
     * @default null
     */
    size: number;
    /**
     * Specifies the type of the file
     * @default ''
     */
    type: string;
}
export declare class ButtonsProps extends ChildProperty<ButtonsProps> {
    /**
     * Specifies the text or html content to browse button
     * @default 'Browse'
     */
    browse: string | HTMLElement;
    /**
     * Specifies the text or html content to upload button
     * @default 'Upload'
     */
    upload: string | HTMLElement;
    /**
     * Specifies the text or html content to clear button
     * @default 'Clear'
     */
    clear: string | HTMLElement;
}
export declare class AsyncSettings extends ChildProperty<AsyncSettings> {
    /**
     * Specifies the URL of save action that will receive the upload files and save in the server.
     * The save action type must be POST request and define the argument as same input name used to render the component.
     * The upload operations could not perform without this property.
     */
    saveUrl: string;
    /**
     * Specifies the URL of remove action that receives the file information and handle the remove operation in server.
     * The remove action type must be POST request and define “removeFileNames” attribute to get file information that will be removed.
     * This property is optional.
     */
    removeUrl: string;
}
export interface FileInfo {
    name: string;
    rawFile: string | Blob;
    size: number;
    status: string;
    type: string;
    validationMessages: ValidationMessages;
    statusCode: string;
}
export interface ValidationMessages {
    minSize?: string;
    maxSize?: string;
}
export interface SelectedEventArgs {
    cancel: boolean;
    filesData: FileInfo[];
    isModified: boolean;
    modifiedFilesData: FileInfo[];
    progressInterval: string;
}
export interface RemovingEventArgs {
    cancel: boolean;
    filesData: FileInfo[];
}
export interface ClearingEventArgs {
    cancel: boolean;
    filesData: FileInfo[];
}
export interface UploadingEventArgs {
    fileData: FileInfo;
    customFormData: {
        [key: string]: Object;
    }[];
    cancel: boolean;
}
/**
 * The uploader component allows to upload images, documents, and other files from local to server.
 * ```html
 * <input type='file' name='images[]' id='upload'/>
 * ```
 * ```typescript
 * <script>
 *   var uploadObj = new Uploader();
 *   uploadObj.appendTo('#upload');
 * </script>
 * ```
 */
export declare class Uploader extends Component<HTMLInputElement> implements INotifyPropertyChanged {
    private initialAttr;
    private uploadWrapper;
    private browseButton;
    private listParent;
    private cloneElement;
    private fileList;
    private actionButtons;
    private uploadButton;
    private clearButton;
    private dropAreaWrapper;
    private filesData;
    private uploadedFilesData;
    private dropZoneElement;
    private currentStatus;
    private l10n;
    private preLocaleObj;
    private uploadTemplateFn;
    private keyboardModule;
    private progressInterval;
    private progressAnimation;
    private isForm;
    private keyConfigs;
    private localeText;
    /**
     * Configures the save and remove URL to perform the upload operations in the server asynchronously.
     * @default { saveUrl: '', removeUrl: '' }
     */
    asyncSettings: AsyncSettingsModel;
    /**
     * When this property is enabled, the uploader component elements are aligned from right-to-left direction to support locales.
     * @default false
     */
    enableRtl: boolean;
    /**
     * Specifies Boolean value that indicates whether the component is enabled or disabled.
     * The uploader component does not allow to interact when this property is disabled.
     * @default true
     */
    enabled: boolean;
    /**
     * Specifies the HTML string that used to customize the content of each file in the list.
     * @default null
     */
    template: string;
    /**
     * Specifies a Boolean value that indicates whether the multiple files can be browsed or
     * dropped simultaneously in the uploader component.
     * @default true
     */
    multiple: boolean;
    /**
     * By default, the uploader component initiates automatic upload when the files are added in upload queue.
     * If you want to manipulate the files before uploading to server, disable the autoUpload property.
     * The buttons “upload” and “clear” will be hided from file list when autoUpload property is true.
     * @default true
     */
    autoUpload: boolean;
    /**
     * You can customize the default text of “browse, clear, and upload” buttons with plain text or HTML elements.
     * The buttons’ text can be customized from localization also. If you configured both locale and buttons property,
     * the uploader component considers the buttons property value.
     * @default { browse : 'Browse', clear: 'Clear', upload: 'Upload' }
     */
    buttons: ButtonsPropsModel;
    /**
     * Specifies the extensions of the file types allowed in the uploader component and pass the extensions
     * with comma separators. For example,
     * if you want to upload specific image files,  pass allowedExtensions as “.jpg,.png”.
     * @default ''
     */
    allowedExtensions: string;
    /**
     * Specifies the minimum file size to be uploaded in bytes.
     * The property used to make sure that you cannot upload empty files and small files.
     * @default 0
     */
    minFileSize: number;
    /**
     * Specifies the maximum allowed file size to be uploaded in bytes.
     * The property used to make sure that you cannot upload too large files.
     * @default 30000000
     */
    maxFileSize: number;
    /**
     * Specifies the drop target to handle the drag-and-drop upload.
     * By default, the component creates wrapper around file input that will act as drop target.
     * @default null
     */
    dropArea: string | HTMLElement;
    /**
     * Specifies the list of files that will be preloaded on rendering of uploader component.
     * The property used to view and remove the uploaded files from server. By default, the files are configured with
     * uploaded successfully state. The following properties are mandatory to configure the preload files:
     * * Name
     * * Size
     * * Type
     * ```html
     * <input type="file" id="fileupload"/>
     * ```
     * ```typescript
     *   let preloadFiles = [{
     *      { name: 'Nature', size: 500000, type: '.png' },
     *      { name: 'TypeScript Succintly', size: 12000, type: '.pdf' },
     *      { name: 'ASP.NET Webhooks', size: 500000, type: '.docx' }
     *   }]
     *   let uploadObj: Uploader = new Uploader({
     *      files: preloadFiles
     *   });
     *   uploadObj.appendTo("#fileupload");
     * ```
     * @default { name: '', size: null, type: '' }
     */
    files: FilesPropModel[];
    /**
     * Specifies a Boolean value that indicates whether the default file list can be rendered.
     * The property used to prevent default file list and design own template for file list.
     * @default true
     */
    showFileList: boolean;
    /**
     * Triggers after selecting or dropping the files by adding the files in upload queue.
     * @event
     */
    selected: EmitType<SelectedEventArgs>;
    /**
     * Triggers when the upload process gets started. This event is used to add additional parameter with upload request.
     * @event
     */
    uploading: EmitType<Object>;
    /**
     * Triggers when the AJAX request gets success on uploading files or removing files.
     * @event
     */
    success: EmitType<Object>;
    /**
     * Triggers when the AJAX request fails on uploading or removing files.
     * @event
     */
    failure: EmitType<Object>;
    /**
     * Triggers on removing the uploaded file. The event used to get confirm before removing the file from server.
     * @event
     */
    removing: EmitType<RemovingEventArgs>;
    /**
     * Triggers before clearing the items in file list when clicking “clear”.
     * @event
     */
    clearing: EmitType<ClearingEventArgs>;
    /**
     * Triggers when uploading a file to the server using the AJAX request.
     * @event
     */
    progress: EmitType<Object>;
    /**
     * Triggers when changes occur in uploaded file list by selecting or dropping files.
     * @event
     */
    change: EmitType<Object>;
    /**
     * Triggers when change the Uploader value.
     */
    constructor(options?: UploaderModel, element?: string | HTMLInputElement);
    /**
     * Calls internally if any of the property value is changed.
     * @private
     */
    onPropertyChanged(newProp: UploaderModel, oldProp: UploaderModel): void;
    private setLocalizedTexts();
    private getKeyValue(val);
    private updateFileList();
    private reRenderFileList();
    protected preRender(): void;
    protected getPersistData(): string;
    /**
     * Return the module name of the component.
     */
    getModuleName(): string;
    /**
     * To Initialize the control rendering
     * @private
     */
    render(): void;
    private renderBrowseButton();
    private renderActionButtons();
    private wireActionButtonEvents();
    private unwireActionButtonEvents();
    private removeActionButtons();
    private renderButtonTemplates();
    private initializeUpload();
    private renderPreLoadFiles();
    private checkActionButtonStatus();
    private setDropArea();
    private setMultipleSelection();
    private checkAutoUpload(fileData);
    private wireEvents();
    private unWireEvents();
    private resetForm();
    private keyActionHandler(e);
    private setReverseFocus(e);
    private setTabFocus(e);
    private removeFocus();
    private browseButtonClick();
    private uploadButtonClick();
    private clearButtonClick();
    private bindDropEvents();
    private unBindDropEvents();
    private onDragLeave(e);
    private dragHover(e);
    private dropElement(e);
    private removeFiles(args);
    private removeFilesData(file, customTemplate);
    private removeUploadedFile(file, custom);
    private removeCompleted(e, files, customTemplate);
    private removeFailed(e, files, customTemplate);
    private onSelectFiles(args);
    private clearData();
    private updateSortedFileList(filesData);
    private checkExtension(files);
    private validatedFileSize(fileSize);
    private createCustomfileList(fileData);
    private createParentUL();
    private createFileList(fileData);
    private truncateName(name);
    private getFileType(name);
    private getFileNameOnly(name);
    private setInitialAttributes();
    private filterfileList(files);
    private updateStatus(files, status?, statusCode?);
    private getLiElement(files);
    private createProgressBar(liElement);
    private updateProgressbar(e, li);
    private changeProgressValue(li, progressValue);
    private uploadInProgress(e, files, customUI?);
    private uploadComplete(e, files, customUI?);
    private uploadFailed(e, files);
    private updateProgressBarClasses(li, className);
    private removeProgressbar(li, callType);
    private animateProgressBar(li, callType);
    private setExtensions(extensions);
    private templateComplier(uploadTemplate);
    private setRTL();
    private localizedTexts(localeText);
    private setControlStatus();
    private checkHTMLAttributes();
    /**
     * It is used to convert bytes value into kilobytes or megabytes depending on the size based
     * on [binary prefix](https://en.wikipedia.org/wiki/Binary_prefix).
     * @param { number } bytes - specifies the file size in bytes.
     * @returns string
     */
    bytesToSize(bytes: number): string;
    /**
     * Allows you to sort the file data alphabetically based on its file name clearly.
     * @param { FileList } filesData - specifies the files data for upload.
     * @returns File[]
     */
    sortFileList(filesData: FileList): File[];
    /**
     * Removes the component from the DOM and detaches all its related event handlers. Also it removes the attributes and classes.
     * @method destroy
     * @return {void}.
     */
    destroy(): void;
    /**
     * Allows you to call the upload process manually by calling save URL action.
     * To process the selected files (added in upload queue), pass an empty argument otherwise
     * upload the specific file based on its argument.
     * @param { FileInfo[] } files - specifies the files data for upload.
     * @returns void
     */
    upload(files: FileInfo[], custom?: boolean): void;
    /**
     * Remove the uploaded file from server manually by calling the remove URL action.
     * If you pass an empty argument to this method, the complete file list can be cleared,
     * otherwise remove the specific file based on its argument (“file_data”).
     * @param { FileInfo | FileInfo[] } fileData - specifies the files data to remove from file list/server.
     * @returns void
     */
    remove(fileData?: FileInfo | FileInfo[], customTemplate?: boolean): void;
    /**
     * Clear all the file entries from list that can be uploaded files or added in upload queue.
     * @returns void
     */
    clearAll(): void;
    getFilesData(): FileInfo[];
}
