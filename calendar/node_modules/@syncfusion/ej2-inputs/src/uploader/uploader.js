var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
define(["require", "exports", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "@syncfusion/ej2-base"], function (require, exports, ej2_base_1, ej2_base_2, ej2_base_3, ej2_base_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ROOT = 'e-uploader';
    var CONTROL_WRAPPER = 'e-upload';
    var INPUT_WRAPPER = 'e-file-select';
    var DROP_AREA = 'e-file-drop';
    var DROP_WRAPPER = 'e-file-select-wrap';
    var LIST_PARENT = 'e-upload-files';
    var FILE = 'e-upload-file-list';
    var STATUS = 'e-file-status';
    var ACTION_BUTTONS = 'e-upload-actions';
    var UPLOAD_BUTTONS = 'e-file-upload-btn e-css e-btn e-primary';
    var CLEAR_BUTTONS = 'e-file-clear-btn e-css e-btn e-flat';
    var FILE_NAME = 'e-file-name';
    var FILE_TYPE = 'e-file-type';
    var FILE_SIZE = 'e-file-size';
    var CLEAR_ICON = 'e-file-remove-btn';
    var REMOVE_ICON = 'e-file-delete-btn';
    var DRAG_HOVER = 'e-upload-drag-hover';
    var PROGRESS_WRAPPER = 'e-upload-progress-wrap';
    var PROGRESSBAR = 'e-upload-progress-bar';
    var PROGRESSBAR_TEXT = 'e-progress-bar-text';
    var UPLOAD_INPROGRESS = 'e-upload-progress';
    var UPLOAD_SUCCESS = 'e-upload-success';
    var UPLOAD_FAILED = 'e-upload-fails';
    var TEXT_CONTAINER = 'e-file-container';
    var VALIDATION_FAILS = 'e-validation-fails';
    var RTL = 'e-rtl';
    var DISABLED = 'e-disabled';
    var RTL_CONTAINER = 'e-rtl-container';
    var ICON_FOCUSED = 'e-clear-icon-focus';
    var PROGRESS_INNER_WRAPPER = 'e-progress-inner-wrap';
    var FilesProp = /** @class */ (function (_super) {
        __extends(FilesProp, _super);
        function FilesProp() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        __decorate([
            ej2_base_1.Property('')
        ], FilesProp.prototype, "name", void 0);
        __decorate([
            ej2_base_1.Property(null)
        ], FilesProp.prototype, "size", void 0);
        __decorate([
            ej2_base_1.Property('')
        ], FilesProp.prototype, "type", void 0);
        return FilesProp;
    }(ej2_base_3.ChildProperty));
    exports.FilesProp = FilesProp;
    var ButtonsProps = /** @class */ (function (_super) {
        __extends(ButtonsProps, _super);
        function ButtonsProps() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        __decorate([
            ej2_base_1.Property('Browse')
        ], ButtonsProps.prototype, "browse", void 0);
        __decorate([
            ej2_base_1.Property('Upload')
        ], ButtonsProps.prototype, "upload", void 0);
        __decorate([
            ej2_base_1.Property('Clear')
        ], ButtonsProps.prototype, "clear", void 0);
        return ButtonsProps;
    }(ej2_base_3.ChildProperty));
    exports.ButtonsProps = ButtonsProps;
    var AsyncSettings = /** @class */ (function (_super) {
        __extends(AsyncSettings, _super);
        function AsyncSettings() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        __decorate([
            ej2_base_1.Property('')
        ], AsyncSettings.prototype, "saveUrl", void 0);
        __decorate([
            ej2_base_1.Property('')
        ], AsyncSettings.prototype, "removeUrl", void 0);
        return AsyncSettings;
    }(ej2_base_3.ChildProperty));
    exports.AsyncSettings = AsyncSettings;
    /**
     * The uploader component allows to upload images, documents, and other files from local to server.
     * ```html
     * <input type='file' name='images[]' id='upload'/>
     * ```
     * ```typescript
     * <script>
     *   var uploadObj = new Uploader();
     *   uploadObj.appendTo('#upload');
     * </script>
     * ```
     */
    var Uploader = /** @class */ (function (_super) {
        __extends(Uploader, _super);
        /**
         * Triggers when change the Uploader value.
         */
        function Uploader(options, element) {
            var _this = _super.call(this, options, element) || this;
            _this.initialAttr = { accept: null, multiple: false, disabled: false };
            _this.fileList = [];
            _this.filesData = [];
            _this.uploadedFilesData = [];
            _this.isForm = false;
            return _this;
        }
        /**
         * Calls internally if any of the property value is changed.
         * @private
         */
        Uploader.prototype.onPropertyChanged = function (newProp, oldProp) {
            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                var prop = _a[_i];
                switch (prop) {
                    case 'allowedExtensions':
                        this.setExtensions(this.allowedExtensions);
                        this.clearAll();
                        break;
                    case 'enabled':
                        this.setControlStatus();
                        break;
                    case 'multiple':
                        this.setMultipleSelection();
                        break;
                    case 'enableRtl':
                        this.setRTL();
                        this.reRenderFileList();
                        break;
                    case 'buttons':
                        this.buttons.browse = ej2_base_1.isNullOrUndefined(this.buttons.browse) ? '' : this.buttons.browse;
                        this.buttons.clear = ej2_base_1.isNullOrUndefined(this.buttons.clear) ? '' : this.buttons.clear;
                        this.buttons.upload = ej2_base_1.isNullOrUndefined(this.buttons.upload) ? '' : this.buttons.upload;
                        this.renderButtonTemplates();
                        break;
                    case 'dropArea':
                        this.unBindDropEvents();
                        this.setDropArea();
                        break;
                    case 'showFileList':
                        if (this.listParent) {
                            this.listParent.style.display = this.showFileList ? 'block' : 'none';
                            this.actionButtons.style.display = this.showFileList ? 'block' : 'none';
                        }
                        break;
                    case 'files':
                        this.renderPreLoadFiles();
                        break;
                    case 'minFileSize':
                    case 'maxFileSize':
                    case 'template':
                    case 'autoUpload':
                        this.clearAll();
                        break;
                    case 'locale':
                        this.l10n.setLocale(this.locale);
                        this.setLocalizedTexts();
                        this.preLocaleObj = ej2_base_3.getValue('currentLocale', this.l10n);
                        break;
                }
            }
        };
        Uploader.prototype.setLocalizedTexts = function () {
            if (ej2_base_1.isNullOrUndefined(this.template)) {
                if (typeof (this.buttons.browse) === 'string') {
                    this.browseButton.innerText = (this.buttons.browse === 'Browse') ?
                        this.localizedTexts('Browse') : this.buttons.browse;
                    this.browseButton.setAttribute('title', this.browseButton.innerText);
                    this.uploadWrapper.querySelector('.' + DROP_AREA).innerHTML = this.localizedTexts('dropFilesHint');
                }
                this.updateFileList();
            }
        };
        Uploader.prototype.getKeyValue = function (val) {
            var keyValue;
            for (var _i = 0, _a = Object.keys(this.preLocaleObj); _i < _a.length; _i++) {
                var key = _a[_i];
                if (this.preLocaleObj[key] === val) {
                    keyValue = key;
                }
            }
            return keyValue;
        };
        Uploader.prototype.updateFileList = function () {
            var element;
            if (this.fileList.length > 0 && !ej2_base_1.isNullOrUndefined(this.uploadWrapper.querySelector('.' + LIST_PARENT))) {
                for (var i = 0; i < this.fileList.length; i++) {
                    element = this.fileList[i].querySelector('.e-file-status');
                    element.innerHTML = this.localizedTexts(this.getKeyValue(this.filesData[i].status));
                    this.filesData[i].status = this.localizedTexts(this.getKeyValue(this.filesData[i].status));
                    if (this.fileList[i].classList.contains(UPLOAD_SUCCESS)) {
                        this.fileList[i].querySelector('.e-icons').setAttribute('title', this.localizedTexts('remove'));
                    }
                    else {
                        this.fileList[i].querySelector('.e-icons').setAttribute('title', this.localizedTexts('delete'));
                    }
                    if (!this.autoUpload) {
                        this.uploadButton.innerText = (this.buttons.upload === 'Upload') ?
                            this.localizedTexts('Upload') : this.buttons.upload;
                        this.clearButton.innerText = (this.buttons.clear === 'Clear') ?
                            this.localizedTexts('Clear') : this.buttons.clear;
                    }
                }
            }
        };
        Uploader.prototype.reRenderFileList = function () {
            if (this.listParent) {
                ej2_base_2.detach(this.listParent);
                this.listParent = null;
                this.fileList = [];
                this.removeActionButtons();
                this.createFileList(this.filesData);
                this.renderActionButtons();
            }
        };
        Uploader.prototype.preRender = function () {
            this.cloneElement = this.element.cloneNode(true);
            this.localeText = { Browse: 'Browse', Clear: 'Clear', Upload: 'Upload',
                dropFilesHint: 'or Drop files here', invalidMaxFileSize: 'File size is too large',
                invalidMinFileSize: 'File size is too small', invalidFileType: 'File type is not allowed',
                uploadFailedMessage: 'File failed to upload', uploadSuccessMessage: 'File uploaded successfully',
                removedSuccessMessage: 'File removed successfully', removedFailedMessage: 'File failed to remove', inProgress: 'Uploading',
                readyToUploadMessage: 'Ready to upload', remove: 'Remove', cancel: 'Cancel', delete: 'Delete file'
            };
            this.l10n = new ej2_base_1.L10n('uploader', this.localeText, this.locale);
            this.preLocaleObj = ej2_base_3.getValue('currentLocale', this.l10n);
            this.checkHTMLAttributes();
            if (this.asyncSettings.saveUrl === '' && this.asyncSettings.removeUrl === '' && !this.autoUpload) {
                if (!ej2_base_1.isNullOrUndefined(this.element.closest('form'))) {
                    this.isForm = true;
                    this.element.closest('form').setAttribute('enctype', 'multipart/form-data');
                    this.element.closest('form').setAttribute('encoding', 'multipart/form-data');
                }
            }
            var ejInstance = ej2_base_3.getValue('ej2_instances', this.element);
            if (this.element.tagName === 'EJS-UPLOADER' || this.element.tagName === 'UPLOADERCOMPONENT') {
                var inputElement = ej2_base_2.createElement('input', { attrs: { type: 'file' } });
                var index = 0;
                for (index; index < this.element.attributes.length; index++) {
                    inputElement.setAttribute(this.element.attributes[index].nodeName, this.element.attributes[index].nodeValue);
                    inputElement.innerHTML = this.element.innerHTML;
                }
                if (!inputElement.hasAttribute('name')) {
                    inputElement.setAttribute('name', 'UploadFiles');
                }
                this.element.appendChild(inputElement);
                this.element = inputElement;
                ej2_base_3.setValue('ej2_instances', ejInstance, this.element);
            }
            if (ej2_base_1.isNullOrUndefined(this.element.getAttribute('name'))) {
                this.element.setAttribute('name', this.element.getAttribute('id'));
            }
            if (!this.element.hasAttribute('type')) {
                this.element.setAttribute('type', 'file');
            }
            this.keyConfigs = {
                previous: 'shift+tab',
                enter: 'enter',
                next: 'tab'
            };
        };
        Uploader.prototype.getPersistData = function () {
            return this.addOnPersist([]);
        };
        /**
         * Return the module name of the component.
         */
        Uploader.prototype.getModuleName = function () {
            return 'uploader';
        };
        /**
         * To Initialize the control rendering
         * @private
         */
        Uploader.prototype.render = function () {
            this.renderBrowseButton();
            this.initializeUpload();
            this.wireEvents();
            this.setMultipleSelection();
            this.setExtensions(this.allowedExtensions);
            this.setRTL();
            this.renderPreLoadFiles();
            this.setControlStatus();
        };
        Uploader.prototype.renderBrowseButton = function () {
            this.browseButton = ej2_base_2.createElement('button', { className: 'e-css e-btn', attrs: { 'type': 'button' } });
            if (typeof (this.buttons.browse) === 'string') {
                this.browseButton.innerText = (this.buttons.browse === 'Browse') ?
                    this.localizedTexts('Browse') : this.buttons.browse;
                this.browseButton.setAttribute('title', this.browseButton.innerText);
            }
            else {
                this.browseButton.appendChild(this.buttons.browse);
            }
            this.element.setAttribute('aria-label', 'Uploader');
        };
        Uploader.prototype.renderActionButtons = function () {
            this.element.setAttribute('tabindex', '-1');
            this.actionButtons = ej2_base_2.createElement('div', { className: ACTION_BUTTONS });
            this.uploadButton = ej2_base_2.createElement('button', { className: UPLOAD_BUTTONS, attrs: { 'type': 'button', 'tabindex': '-1' } });
            this.clearButton = ej2_base_2.createElement('button', { className: CLEAR_BUTTONS, attrs: { 'type': 'button', 'tabindex': '-1' } });
            this.actionButtons.appendChild(this.clearButton);
            this.actionButtons.appendChild(this.uploadButton);
            this.renderButtonTemplates();
            this.uploadWrapper.appendChild(this.actionButtons);
            this.browseButton.blur();
            this.uploadButton.focus();
            this.wireActionButtonEvents();
        };
        Uploader.prototype.wireActionButtonEvents = function () {
            ej2_base_1.EventHandler.add(this.uploadButton, 'click', this.uploadButtonClick, this);
            ej2_base_1.EventHandler.add(this.clearButton, 'click', this.clearButtonClick, this);
        };
        Uploader.prototype.unwireActionButtonEvents = function () {
            ej2_base_1.EventHandler.remove(this.uploadButton, 'click', this.uploadButtonClick);
            ej2_base_1.EventHandler.remove(this.clearButton, 'click', this.clearButtonClick);
        };
        Uploader.prototype.removeActionButtons = function () {
            if (this.actionButtons) {
                this.unwireActionButtonEvents();
                ej2_base_2.detach(this.actionButtons);
                this.actionButtons = null;
            }
        };
        Uploader.prototype.renderButtonTemplates = function () {
            if (typeof (this.buttons.browse) === 'string') {
                this.browseButton.innerText = (this.buttons.browse === 'Browse') ?
                    this.localizedTexts('Browse') : this.buttons.browse;
                this.browseButton.setAttribute('title', this.browseButton.innerText);
            }
            else {
                this.browseButton.appendChild(this.buttons.browse);
            }
            if (this.uploadButton) {
                var uploadText = void 0;
                uploadText = ej2_base_1.isNullOrUndefined(this.buttons.upload) ? 'Upload' : this.buttons.upload;
                this.buttons.upload = uploadText;
                if (typeof (this.buttons.upload) === 'string') {
                    this.uploadButton.innerText = (this.buttons.upload === 'Upload') ?
                        this.localizedTexts('Upload') : this.buttons.upload;
                    this.uploadButton.setAttribute('title', this.uploadButton.innerText);
                }
                else {
                    this.uploadButton.appendChild(this.buttons.upload);
                }
            }
            if (this.clearButton) {
                var clearText = void 0;
                clearText = ej2_base_1.isNullOrUndefined(this.buttons.clear) ? 'Clear' : this.buttons.clear;
                this.buttons.clear = clearText;
                if (typeof (this.buttons.clear) === 'string') {
                    this.clearButton.innerText = (this.buttons.clear === 'Clear') ?
                        this.localizedTexts('Clear') : this.buttons.clear;
                    this.clearButton.setAttribute('title', this.clearButton.innerText);
                }
                else {
                    this.clearButton.appendChild(this.buttons.clear);
                }
            }
        };
        Uploader.prototype.initializeUpload = function () {
            this.element.setAttribute('tabindex', '-1');
            var inputWrapper = ej2_base_2.createElement('span', { className: INPUT_WRAPPER });
            this.element.parentElement.insertBefore(inputWrapper, this.element);
            this.dropAreaWrapper = ej2_base_2.createElement('div', { className: DROP_WRAPPER });
            this.element.parentElement.insertBefore(this.dropAreaWrapper, this.element);
            inputWrapper.appendChild(this.element);
            this.dropAreaWrapper.appendChild(this.browseButton);
            this.dropAreaWrapper.appendChild(inputWrapper);
            var fileDropArea = ej2_base_2.createElement('span', { className: DROP_AREA });
            fileDropArea.innerHTML = this.localizedTexts('dropFilesHint');
            this.dropAreaWrapper.appendChild(fileDropArea);
            this.uploadWrapper = ej2_base_2.createElement('div', { className: CONTROL_WRAPPER, attrs: { 'aria-activedescendant': 'li-focused' } });
            this.dropAreaWrapper.parentElement.insertBefore(this.uploadWrapper, this.dropAreaWrapper);
            this.uploadWrapper.appendChild(this.dropAreaWrapper);
            this.setDropArea();
        };
        Uploader.prototype.renderPreLoadFiles = function () {
            if (ej2_base_1.isNullOrUndefined(this.files[0].size) || !ej2_base_1.isNullOrUndefined(this.template)) {
                return;
            }
            var files = [].slice.call(this.files);
            var filesData = [];
            if (!this.multiple) {
                this.clearData();
                files = [files[0]];
            }
            for (var _i = 0, files_1 = files; _i < files_1.length; _i++) {
                var data = files_1[_i];
                var fileData = {
                    name: this.getFileNameOnly(data.name) + '.' + data.type.split('.')[data.type.split('.').length - 1],
                    rawFile: '',
                    size: data.size,
                    status: this.localizedTexts('uploadSuccessMessage'),
                    type: data.type,
                    validationMessages: { minSize: '', maxSize: '' },
                    statusCode: '2'
                };
                filesData.push(fileData);
                this.filesData.push(fileData);
            }
            this.createFileList(filesData);
            if (!this.autoUpload && this.listParent && !this.actionButtons && !this.isForm) {
                this.renderActionButtons();
            }
            this.checkActionButtonStatus();
        };
        Uploader.prototype.checkActionButtonStatus = function () {
            if (this.actionButtons) {
                var length_1 = this.uploadWrapper.querySelectorAll('.' + VALIDATION_FAILS).length +
                    this.uploadWrapper.querySelectorAll('.e-upload-fails:not(.e-upload-progress)').length +
                    this.uploadWrapper.querySelectorAll('span.' + UPLOAD_SUCCESS).length +
                    this.uploadWrapper.querySelectorAll('span.' + UPLOAD_INPROGRESS).length;
                if (length_1 > 0 && length_1 === this.uploadWrapper.querySelectorAll('li').length) {
                    this.uploadButton.setAttribute('disabled', 'disabled');
                }
                else {
                    this.uploadButton.removeAttribute('disabled');
                }
            }
        };
        Uploader.prototype.setDropArea = function () {
            var dropTextArea = this.dropAreaWrapper.querySelector('.e-file-drop');
            if (this.dropArea) {
                this.dropZoneElement = (typeof (this.dropArea) !== 'string') ? this.dropArea :
                    document.querySelector(this.dropArea);
                var element = this.element;
                var enableDropText = false;
                while (element.parentNode) {
                    element = element.parentNode;
                    if (element === this.dropZoneElement) {
                        enableDropText = true;
                    }
                }
                if (!enableDropText) {
                    dropTextArea.textContent = '';
                }
            }
            else {
                this.dropZoneElement = this.uploadWrapper;
                dropTextArea.textContent = this.localizedTexts('dropFilesHint');
            }
            this.bindDropEvents();
        };
        Uploader.prototype.setMultipleSelection = function () {
            if (this.multiple && !this.element.hasAttribute('multiple')) {
                var newAttr = document.createAttribute('multiple');
                this.element.setAttributeNode(newAttr);
            }
            else if (!this.multiple) {
                this.element.removeAttribute('multiple');
            }
        };
        Uploader.prototype.checkAutoUpload = function (fileData) {
            if (this.autoUpload) {
                this.upload(fileData);
                this.removeActionButtons();
            }
            else if (!this.actionButtons) {
                this.renderActionButtons();
            }
            this.checkActionButtonStatus();
        };
        Uploader.prototype.wireEvents = function () {
            ej2_base_1.EventHandler.add(this.browseButton, 'click', this.browseButtonClick, this);
            ej2_base_1.EventHandler.add(this.element, 'change', this.onSelectFiles, this);
            ej2_base_1.EventHandler.add(document, 'click', this.removeFocus, this);
            this.keyboardModule = new ej2_base_3.KeyboardEvents(this.uploadWrapper, {
                keyAction: this.keyActionHandler.bind(this),
                keyConfigs: this.keyConfigs,
                eventName: 'keydown',
            });
            if (this.isForm) {
                ej2_base_1.EventHandler.add(this.element.closest('form'), 'reset', this.resetForm, this);
            }
        };
        Uploader.prototype.unWireEvents = function () {
            ej2_base_1.EventHandler.remove(this.browseButton, 'click', this.browseButtonClick);
            ej2_base_1.EventHandler.remove(this.element, 'change', this.onSelectFiles);
            ej2_base_1.EventHandler.remove(document, 'click', this.removeFocus);
            this.keyboardModule.destroy();
        };
        Uploader.prototype.resetForm = function () {
            this.clearAll();
            this.element.value = '';
        };
        Uploader.prototype.keyActionHandler = function (e) {
            switch (e.action) {
                case 'next':
                    if (e.target === this.browseButton && ej2_base_1.isNullOrUndefined(this.listParent)) {
                        this.browseButton.blur();
                    }
                    else if (e.target === this.uploadButton) {
                        this.uploadButton.blur();
                    }
                    else {
                        this.setTabFocus(e);
                        e.preventDefault();
                        e.stopPropagation();
                        if (e.target === this.clearButton && this.uploadButton.hasAttribute('disabled')) {
                            this.clearButton.blur();
                        }
                    }
                    break;
                case 'previous':
                    if (e.target === this.browseButton) {
                        this.browseButton.blur();
                    }
                    else {
                        this.setReverseFocus(e);
                        e.preventDefault();
                        e.stopPropagation();
                    }
                    break;
                case 'enter':
                    if (e.target === this.clearButton) {
                        this.clearButtonClick();
                    }
                    else if (e.target === this.uploadButton) {
                        this.uploadButtonClick();
                    }
                    else if (e.target === this.browseButton) {
                        this.browseButtonClick();
                    }
                    else {
                        this.removeFiles(e);
                        this.browseButton.focus();
                    }
                    e.preventDefault();
                    e.stopPropagation();
                    break;
            }
        };
        Uploader.prototype.setReverseFocus = function (e) {
            var target = e.target;
            if (target === this.uploadButton) {
                this.uploadButton.blur();
                this.clearButton.focus();
            }
            else if (target === this.clearButton && this.listParent && this.listParent.querySelector('.e-icons')) {
                this.clearButton.blur();
                var items = [].slice.call(this.listParent.querySelectorAll('span.e-icons'));
                items[items.length - 1].classList.add(ICON_FOCUSED);
                items[items.length - 1].focus();
            }
            else {
                var iconElements = [].slice.call(this.listParent.querySelectorAll('span.e-icons'));
                var index = iconElements.indexOf(target);
                if (index > 0) {
                    this.removeFocus();
                    iconElements[index - 1].classList.add(ICON_FOCUSED);
                    iconElements[index - 1].focus();
                }
                else {
                    this.removeFocus();
                    this.browseButton.focus();
                }
            }
        };
        Uploader.prototype.setTabFocus = function (e) {
            var target = e.target;
            if (target === this.clearButton) {
                this.removeFocus();
                if (this.uploadButton.hasAttribute('disabled')) {
                    return;
                }
                this.uploadButton.focus();
            }
            else if (target.classList.contains('e-icons')) {
                var iconElements = [].slice.call(this.listParent.querySelectorAll('span.e-icons'));
                var index = iconElements.indexOf(target);
                if (index < (iconElements.length - 1)) {
                    this.removeFocus();
                    iconElements[index + 1].classList.add(ICON_FOCUSED);
                    iconElements[index + 1].focus();
                }
                else {
                    this.removeFocus();
                    this.clearButton.focus();
                }
            }
            else {
                this.browseButton.blur();
                var iconElement = this.listParent.querySelector('span.e-icons');
                iconElement.focus();
                iconElement.classList.add(ICON_FOCUSED);
            }
        };
        Uploader.prototype.removeFocus = function () {
            if (this.uploadWrapper && this.listParent && this.listParent.querySelector('.' + ICON_FOCUSED)) {
                document.activeElement.blur();
                this.listParent.querySelector('.' + ICON_FOCUSED).classList.remove(ICON_FOCUSED);
            }
        };
        Uploader.prototype.browseButtonClick = function () {
            this.element.click();
        };
        Uploader.prototype.uploadButtonClick = function () {
            this.upload(this.filesData);
        };
        Uploader.prototype.clearButtonClick = function () {
            this.clearAll();
        };
        Uploader.prototype.bindDropEvents = function () {
            if (this.dropZoneElement) {
                ej2_base_1.EventHandler.add(this.dropZoneElement, 'drop', this.dropElement, this);
                ej2_base_1.EventHandler.add(this.dropZoneElement, 'dragover', this.dragHover, this);
                ej2_base_1.EventHandler.add(this.dropZoneElement, 'dragleave', this.onDragLeave, this);
            }
        };
        Uploader.prototype.unBindDropEvents = function () {
            if (this.dropZoneElement) {
                ej2_base_1.EventHandler.remove(this.dropZoneElement, 'drop', this.dropElement);
                ej2_base_1.EventHandler.remove(this.dropZoneElement, 'dragover', this.dragHover);
                ej2_base_1.EventHandler.remove(this.dropZoneElement, 'dragleave', this.onDragLeave);
            }
        };
        Uploader.prototype.onDragLeave = function (e) {
            this.dropZoneElement.classList.remove(DRAG_HOVER);
        };
        Uploader.prototype.dragHover = function (e) {
            if (!this.enabled) {
                return;
            }
            this.dropZoneElement.classList.add(DRAG_HOVER);
            e.preventDefault();
            e.stopPropagation();
        };
        Uploader.prototype.dropElement = function (e) {
            this.dropZoneElement.classList.remove(DRAG_HOVER);
            this.onSelectFiles(e);
            e.preventDefault();
            e.stopPropagation();
        };
        Uploader.prototype.removeFiles = function (args) {
            if (!this.enabled) {
                return;
            }
            var selectedElement = args.target.parentElement;
            var index = this.fileList.indexOf(selectedElement);
            var fileData = this.filesData[index];
            this.remove(fileData);
            this.element.value = '';
            this.checkActionButtonStatus();
        };
        Uploader.prototype.removeFilesData = function (file, customTemplate) {
            if (customTemplate) {
                return;
            }
            var selectedElement = this.getLiElement(file);
            if (ej2_base_1.isNullOrUndefined(selectedElement)) {
                return;
            }
            ej2_base_2.detach(selectedElement);
            var index = this.fileList.indexOf(selectedElement);
            this.fileList.splice(index, 1);
            this.filesData.splice(index, 1);
            if (this.fileList.length === 0) {
                ej2_base_2.detach(this.listParent);
                this.listParent = null;
                this.removeActionButtons();
            }
        };
        Uploader.prototype.removeUploadedFile = function (file, custom) {
            var _this = this;
            var selectedFiles = file;
            var ajax = new XMLHttpRequest();
            var formData = new FormData();
            formData.append('_datas', selectedFiles.rawFile);
            ajax.addEventListener('load', function (e) { _this.removeCompleted(e, selectedFiles, custom); }, false);
            /* istanbul ignore next */
            ajax.addEventListener('error', function (e) { _this.removeFailed(e, selectedFiles, custom); }, false);
            ajax.open('POST', this.asyncSettings.removeUrl);
            ajax.send(formData);
        };
        Uploader.prototype.removeCompleted = function (e, files, customTemplate) {
            var args = {
                e: e, operation: 'remove', file: this.updateStatus(files, this.localizedTexts('removedSuccessMessage'), '2')
            };
            this.trigger('success', args);
            this.removeFilesData(files, customTemplate);
            var index = this.uploadedFilesData.indexOf(files);
            this.uploadedFilesData.splice(index, 1);
            this.trigger('change', { files: this.uploadedFilesData });
        };
        Uploader.prototype.removeFailed = function (e, files, customTemplate) {
            var args = {
                e: e, operation: 'remove', file: this.updateStatus(files, this.localizedTexts('removedFailedMessage'), '0')
            };
            if (!customTemplate) {
                var index = this.filesData.indexOf(files);
                var rootElement = this.fileList[index];
                if (rootElement) {
                    var statusElement = rootElement.querySelector('.' + STATUS);
                    rootElement.classList.remove(UPLOAD_SUCCESS);
                    statusElement.classList.remove(UPLOAD_SUCCESS);
                    rootElement.classList.add(UPLOAD_FAILED);
                    statusElement.classList.add(UPLOAD_FAILED);
                }
                this.checkActionButtonStatus();
            }
            this.trigger('failure', args);
        };
        Uploader.prototype.onSelectFiles = function (args) {
            if (!this.enabled) {
                return;
            }
            var fileData = [];
            var targetFiles;
            if (args.type === 'drop') {
                var files = args.dataTransfer.files;
                targetFiles = this.multiple ? this.sortFileList(files) : [files[0]];
            }
            else {
                targetFiles = [].slice.call(args.target.files);
            }
            if (!this.multiple) {
                this.clearData();
                targetFiles = [targetFiles[0]];
            }
            for (var i = 0; i < targetFiles.length; i++) {
                var file = targetFiles[i];
                var eventArgs_1 = {
                    name: file.name,
                    rawFile: file,
                    size: file.size,
                    status: this.localizedTexts('readyToUploadMessage'),
                    type: this.getFileType(file.name),
                    validationMessages: this.validatedFileSize(file.size),
                    statusCode: '1'
                };
                eventArgs_1.status = eventArgs_1.validationMessages.minSize !== '' ? this.localizedTexts('invalidMinFileSize') :
                    eventArgs_1.validationMessages.maxSize !== '' ? this.localizedTexts('invalidMaxFileSize') : eventArgs_1.status;
                if (eventArgs_1.validationMessages.minSize !== '' || eventArgs_1.validationMessages.maxSize !== '') {
                    eventArgs_1.statusCode = '0';
                }
                fileData.push(eventArgs_1);
            }
            var eventArgs = {
                cancel: false,
                filesData: fileData,
                isModified: false,
                modifiedFilesData: [],
                progressInterval: ''
            };
            if (args.type === 'drop') {
                fileData = this.checkExtension(fileData);
            }
            this.trigger('selected', eventArgs);
            if (eventArgs.cancel) {
                return;
            }
            if (eventArgs.isModified && eventArgs.modifiedFilesData.length > 0) {
                var dataFiles = this.checkExtension(eventArgs.modifiedFilesData);
                this.updateSortedFileList(dataFiles);
                if (!this.isForm) {
                    this.checkAutoUpload(dataFiles);
                }
                this.filesData = dataFiles;
            }
            else {
                this.createFileList(fileData);
                this.filesData = this.filesData.concat(fileData);
                if (!this.isForm) {
                    this.checkAutoUpload(fileData);
                }
            }
            if (!ej2_base_1.isNullOrUndefined(eventArgs.progressInterval) && eventArgs.progressInterval !== '') {
                this.progressInterval = eventArgs.progressInterval;
            }
        };
        Uploader.prototype.clearData = function () {
            if (!ej2_base_1.isNullOrUndefined(this.listParent)) {
                ej2_base_2.detach(this.listParent);
                this.listParent = null;
            }
            this.element.value = '';
            this.fileList = [];
            this.filesData = [];
            this.removeActionButtons();
        };
        Uploader.prototype.updateSortedFileList = function (filesData) {
            var previousListClone = ej2_base_2.createElement('div', { id: 'clonewrapper' });
            var added = -1;
            var removedList;
            if (this.listParent) {
                for (var i = 0; i < this.listParent.querySelectorAll('li').length; i++) {
                    var liElement = this.listParent.querySelectorAll('li')[i];
                    previousListClone.appendChild(liElement.cloneNode(true));
                }
                removedList = this.listParent.querySelectorAll('li');
                for (var _i = 0, removedList_1 = removedList; _i < removedList_1.length; _i++) {
                    var item = removedList_1[_i];
                    ej2_base_2.detach(item);
                }
                this.removeActionButtons();
                var oldList = [].slice.call(previousListClone.childNodes);
                ej2_base_2.detach(this.listParent);
                this.listParent = null;
                this.fileList = [];
                this.createParentUL();
                for (var index = 0; index < filesData.length; index++) {
                    for (var j = 0; j < this.filesData.length; j++) {
                        if (this.filesData[j].name === filesData[index].name) {
                            this.listParent.appendChild(oldList[j]);
                            ej2_base_1.EventHandler.add(oldList[j].querySelector('.e-icons'), 'click', this.removeFiles, this);
                            this.fileList.push(oldList[j]);
                            added = index;
                        }
                    }
                    if (added !== index) {
                        this.createFileList([filesData[index]]);
                    }
                }
            }
            else {
                this.createFileList(filesData);
            }
        };
        Uploader.prototype.checkExtension = function (files) {
            var dropFiles = files;
            if (this.allowedExtensions !== '') {
                var allowedExtensions = [];
                var extensions = this.allowedExtensions.split(',');
                for (var _i = 0, extensions_1 = extensions; _i < extensions_1.length; _i++) {
                    var extension = extensions_1[_i];
                    allowedExtensions.push(extension.trim().toLocaleLowerCase());
                }
                for (var i = 0; i < files.length; i++) {
                    if (allowedExtensions.indexOf(('.' + files[i].type).toLocaleLowerCase()) === -1) {
                        files[i].status = this.localizedTexts('invalidFileType');
                        files[i].statusCode = '0';
                    }
                }
            }
            return dropFiles;
        };
        Uploader.prototype.validatedFileSize = function (fileSize) {
            var minSizeError = '';
            var maxSizeError = '';
            if (fileSize < this.minFileSize) {
                minSizeError = this.localizedTexts('invalidMinFileSize');
            }
            else if (fileSize > this.maxFileSize) {
                maxSizeError = this.localizedTexts('invalidMaxFileSize');
            }
            else {
                minSizeError = '';
                maxSizeError = '';
            }
            var errorMessage = { minSize: minSizeError, maxSize: maxSizeError };
            return errorMessage;
        };
        Uploader.prototype.createCustomfileList = function (fileData) {
            this.createParentUL();
            for (var _i = 0, fileData_1 = fileData; _i < fileData_1.length; _i++) {
                var listItem = fileData_1[_i];
                var liElement = ej2_base_2.createElement('li', { className: FILE, attrs: { 'data-file-name': listItem.name } });
                this.uploadTemplateFn = this.templateComplier(this.template);
                var length_2 = this.uploadTemplateFn(listItem).length;
                for (var i = 0; i < length_2; i++) {
                    liElement.appendChild(this.uploadTemplateFn(listItem)[i]);
                }
                this.listParent.appendChild(liElement);
                this.fileList.push(liElement);
            }
        };
        Uploader.prototype.createParentUL = function () {
            if (ej2_base_1.isNullOrUndefined(this.listParent)) {
                this.listParent = ej2_base_2.createElement('ul', { className: LIST_PARENT });
                this.uploadWrapper.appendChild(this.listParent);
                this.listParent.style.display = this.showFileList ? 'block' : 'none';
            }
        };
        Uploader.prototype.createFileList = function (fileData) {
            this.createParentUL();
            if (this.template !== '' && !ej2_base_1.isNullOrUndefined(this.template)) {
                this.createCustomfileList(fileData);
            }
            else {
                for (var _i = 0, fileData_2 = fileData; _i < fileData_2.length; _i++) {
                    var listItem = fileData_2[_i];
                    var liElement = ej2_base_2.createElement('li', { className: FILE, attrs: { 'data-file-name': listItem.name } });
                    var textContainer = ej2_base_2.createElement('span', { className: TEXT_CONTAINER });
                    var textElement = ej2_base_2.createElement('span', { className: FILE_NAME, attrs: { 'title': listItem.name } });
                    textElement.innerHTML = this.getFileNameOnly(listItem.name);
                    var fileExtension = ej2_base_2.createElement('span', { className: FILE_TYPE });
                    fileExtension.innerHTML = '.' + this.getFileType(listItem.name);
                    if (!this.enableRtl) {
                        textContainer.appendChild(textElement);
                        textContainer.appendChild(fileExtension);
                    }
                    else {
                        var rtlContainer = ej2_base_2.createElement('span', { className: RTL_CONTAINER });
                        rtlContainer.appendChild(fileExtension);
                        rtlContainer.appendChild(textElement);
                        textContainer.appendChild(rtlContainer);
                    }
                    var fileSize = ej2_base_2.createElement('span', { className: FILE_SIZE });
                    fileSize.innerHTML = this.bytesToSize(listItem.size);
                    textContainer.appendChild(fileSize);
                    var statusElement = ej2_base_2.createElement('span', { className: STATUS });
                    textContainer.appendChild(statusElement);
                    statusElement.innerHTML = listItem.status;
                    liElement.appendChild(textContainer);
                    var iconElement = ej2_base_2.createElement('span', { className: ' e-icons', attrs: { 'tabindex': '-1' } });
                    iconElement.setAttribute('title', this.localizedTexts('remove'));
                    liElement.appendChild(iconElement);
                    ej2_base_1.EventHandler.add(iconElement, 'click', this.removeFiles, this);
                    if (listItem.statusCode === '2') {
                        statusElement.classList.add(UPLOAD_SUCCESS);
                        iconElement.classList.add(REMOVE_ICON);
                    }
                    else if (listItem.statusCode !== '1') {
                        statusElement.classList.remove(UPLOAD_SUCCESS);
                        statusElement.classList.add(VALIDATION_FAILS);
                    }
                    if (this.autoUpload && listItem.statusCode === '1' && this.asyncSettings.saveUrl !== '') {
                        statusElement.innerHTML = '';
                    }
                    if (!iconElement.classList.contains(REMOVE_ICON)) {
                        iconElement.classList.add(CLEAR_ICON);
                    }
                    this.listParent.appendChild(liElement);
                    this.fileList.push(liElement);
                    this.truncateName(textElement);
                }
            }
        };
        Uploader.prototype.truncateName = function (name) {
            var nameElement = name;
            var text;
            if (nameElement.offsetWidth < nameElement.scrollWidth) {
                text = nameElement.textContent;
                nameElement.dataset.tail = text.slice(text.length - 10);
            }
        };
        Uploader.prototype.getFileType = function (name) {
            var extension;
            var index = name.lastIndexOf('.');
            if (index >= 0) {
                extension = name.substring(index + 1);
            }
            return extension ? extension : '';
        };
        Uploader.prototype.getFileNameOnly = function (name) {
            var type = this.getFileType(name);
            var names = name.split('.' + type);
            return type = names[0];
        };
        Uploader.prototype.setInitialAttributes = function () {
            if (this.initialAttr.accept) {
                this.element.setAttribute('accept', this.initialAttr.accept);
            }
            if (this.initialAttr.disabled) {
                this.element.setAttribute('disabled', 'disabled');
            }
            if (this.initialAttr.multiple) {
                var newAttr = document.createAttribute('multiple');
                this.element.setAttributeNode(newAttr);
            }
        };
        Uploader.prototype.filterfileList = function (files) {
            var filterFiles = [];
            var li;
            for (var i = 0; i < files.length; i++) {
                li = this.getLiElement(files[i]);
                if (!li.classList.contains(UPLOAD_SUCCESS)) {
                    filterFiles.push(files[i]);
                }
            }
            return filterFiles;
        };
        Uploader.prototype.updateStatus = function (files, status, statusCode) {
            if (!(status === '' || ej2_base_1.isNullOrUndefined(status)) && !(statusCode === '' || ej2_base_1.isNullOrUndefined(statusCode))) {
                files.status = status;
                files.statusCode = statusCode;
            }
            var li = this.getLiElement(files);
            if (!ej2_base_1.isNullOrUndefined(li)) {
                if (!ej2_base_1.isNullOrUndefined(li.querySelector('.' + STATUS)) && !((status === '' || ej2_base_1.isNullOrUndefined(status)))) {
                    li.querySelector('.' + STATUS).textContent = status;
                }
            }
            return files;
        };
        Uploader.prototype.getLiElement = function (files) {
            var liElements = [];
            var li;
            if (this.uploadWrapper) {
                liElements = this.uploadWrapper.querySelectorAll('.' + LIST_PARENT + '> li');
                for (var i = 0; i < liElements.length; i++) {
                    if (liElements[i].getAttribute('data-file-name') === files.name) {
                        li = liElements[i];
                    }
                }
            }
            return li;
        };
        Uploader.prototype.createProgressBar = function (liElement) {
            var progressbarWrapper = ej2_base_2.createElement('span', { className: PROGRESS_WRAPPER });
            var progressBar = ej2_base_2.createElement('progressbar', { className: PROGRESSBAR, attrs: { value: '0', max: '100' } });
            var progressbarInnerWrapper = ej2_base_2.createElement('span', { className: PROGRESS_INNER_WRAPPER });
            progressBar.setAttribute('style', 'width: 0%');
            var progressbarText = ej2_base_2.createElement('span', { className: PROGRESSBAR_TEXT });
            progressbarText.textContent = '0%';
            progressbarInnerWrapper.appendChild(progressBar);
            progressbarWrapper.appendChild(progressbarInnerWrapper);
            progressbarWrapper.appendChild(progressbarText);
            liElement.querySelector('.' + TEXT_CONTAINER).appendChild(progressbarWrapper);
        };
        Uploader.prototype.updateProgressbar = function (e, li) {
            if (!isNaN(Math.round((e.loaded / e.total) * 100)) && !ej2_base_1.isNullOrUndefined(li.querySelector('.' + PROGRESSBAR))) {
                if (!ej2_base_1.isNullOrUndefined(this.progressInterval) && this.progressInterval !== '') {
                    var value = (Math.round((e.loaded / e.total) * 100)) % parseInt(this.progressInterval, 10);
                    if (value === 0 || value === 100) {
                        this.changeProgressValue(li, Math.round((e.loaded / e.total) * 100).toString() + '%');
                    }
                }
                else {
                    this.changeProgressValue(li, Math.round((e.loaded / e.total) * 100).toString() + '%');
                }
            }
        };
        Uploader.prototype.changeProgressValue = function (li, progressValue) {
            li.querySelector('.' + PROGRESSBAR).setAttribute('style', 'width:' + progressValue);
            li.querySelector('.' + PROGRESSBAR_TEXT).textContent = progressValue;
        };
        Uploader.prototype.uploadInProgress = function (e, files, customUI) {
            var li = this.getLiElement(files);
            if (ej2_base_1.isNullOrUndefined(li) && (!customUI || ej2_base_1.isNullOrUndefined(customUI))) {
                return;
            }
            if (!ej2_base_1.isNullOrUndefined(li)) {
                if (!(li.querySelectorAll('.' + PROGRESS_WRAPPER).length > 0) && li.querySelector('.' + STATUS)) {
                    li.querySelector('.' + STATUS).classList.add(UPLOAD_INPROGRESS);
                    this.createProgressBar(li);
                    this.updateProgressBarClasses(li, UPLOAD_INPROGRESS);
                }
                this.updateProgressbar(e, li);
                if (!ej2_base_1.isNullOrUndefined(li.querySelector('.e-icons'))) {
                    li.querySelector('.e-icons').removeAttribute('title');
                    ej2_base_1.EventHandler.remove(li.querySelector('.e-icons'), 'click', this.removeFiles);
                    li.querySelector('.e-icons').classList.add(UPLOAD_INPROGRESS);
                }
            }
            var args = { e: e, operation: 'upload', file: this.updateStatus(files, this.localizedTexts('inProgress'), '3') };
            this.trigger('progress', args);
        };
        /* istanbul ignore next */
        Uploader.prototype.uploadComplete = function (e, files, customUI) {
            var status = e.target;
            if (status.readyState === 4 && status.status === 200) {
                var li = this.getLiElement(files);
                if (ej2_base_1.isNullOrUndefined(li) && (!customUI || ej2_base_1.isNullOrUndefined(customUI))) {
                    return;
                }
                if (!ej2_base_1.isNullOrUndefined(li)) {
                    this.updateProgressBarClasses(li, UPLOAD_SUCCESS);
                    this.removeProgressbar(li, 'success');
                    if (!ej2_base_1.isNullOrUndefined(li.querySelector('.' + CLEAR_ICON))) {
                        li.querySelector('.' + CLEAR_ICON).classList.add(REMOVE_ICON);
                        li.querySelector('.' + CLEAR_ICON).setAttribute('title', this.localizedTexts('delete'));
                        li.querySelector('.' + CLEAR_ICON).classList.remove(CLEAR_ICON);
                    }
                    if (!ej2_base_1.isNullOrUndefined(li.querySelector('.e-icons'))) {
                        ej2_base_1.EventHandler.add(li.querySelector('.e-icons'), 'click', this.removeFiles, this);
                        li.querySelector('.e-icons').classList.remove(UPLOAD_INPROGRESS);
                        li.querySelector('.e-icons').setAttribute('title', this.localizedTexts('delete'));
                    }
                }
                var args = { e: e, operation: 'upload', file: this.updateStatus(files, this.localizedTexts('uploadSuccessMessage'), '2') };
                this.trigger('success', args);
                this.uploadedFilesData.push(files);
                this.trigger('change', { files: this.uploadedFilesData });
                this.checkActionButtonStatus();
            }
            else {
                this.uploadFailed(e, files);
            }
        };
        Uploader.prototype.uploadFailed = function (e, files) {
            var li = this.getLiElement(files);
            var args = { e: e, operation: 'upload', file: this.updateStatus(files, this.localizedTexts('uploadFailedMessage'), '0') };
            if (!ej2_base_1.isNullOrUndefined(li)) {
                this.updateProgressBarClasses(li, UPLOAD_FAILED);
                this.removeProgressbar(li, 'failure');
                li.querySelector('.' + CLEAR_ICON).setAttribute('title', this.localizedTexts('remove'));
                ej2_base_1.EventHandler.add(li.querySelector('.e-icons'), 'click', this.removeFiles, this);
                li.querySelector('.e-icons').classList.remove(UPLOAD_INPROGRESS);
            }
            this.trigger('failure', args);
            this.checkActionButtonStatus();
        };
        Uploader.prototype.updateProgressBarClasses = function (li, className) {
            var progressBar = li.querySelector('.' + PROGRESSBAR);
            if (!ej2_base_1.isNullOrUndefined(progressBar)) {
                progressBar.classList.add(className);
            }
        };
        Uploader.prototype.removeProgressbar = function (li, callType) {
            var _this = this;
            if (!ej2_base_1.isNullOrUndefined(li.querySelector('.' + PROGRESS_WRAPPER))) {
                this.progressAnimation = new ej2_base_2.Animation({ duration: 1250 });
                this.progressAnimation.animate(li.querySelector('.' + PROGRESS_WRAPPER), { name: 'FadeOut' });
                this.progressAnimation.animate(li.querySelector('.' + PROGRESSBAR_TEXT), { name: 'FadeOut' });
                setTimeout(function () { _this.animateProgressBar(li, callType); }, 750);
            }
        };
        /* istanbul ignore next */
        Uploader.prototype.animateProgressBar = function (li, callType) {
            if (callType === 'success') {
                li.classList.add(UPLOAD_SUCCESS);
                if (!ej2_base_1.isNullOrUndefined(li.querySelector('.' + STATUS))) {
                    li.querySelector('.' + STATUS).classList.remove(UPLOAD_INPROGRESS);
                    this.progressAnimation.animate(li.querySelector('.' + STATUS), { name: 'FadeIn' });
                    li.querySelector('.' + STATUS).classList.add(UPLOAD_SUCCESS);
                }
            }
            else {
                if (!ej2_base_1.isNullOrUndefined(li.querySelector('.' + STATUS))) {
                    li.querySelector('.' + STATUS).classList.remove(UPLOAD_INPROGRESS);
                    this.progressAnimation.animate(li.querySelector('.' + STATUS), { name: 'FadeIn' });
                    li.querySelector('.' + STATUS).classList.add(UPLOAD_FAILED);
                }
            }
            ej2_base_2.detach(li.querySelector('.' + PROGRESS_WRAPPER));
        };
        Uploader.prototype.setExtensions = function (extensions) {
            this.element.setAttribute('accept', extensions);
        };
        Uploader.prototype.templateComplier = function (uploadTemplate) {
            if (uploadTemplate) {
                var exception = void 0;
                try {
                    if (document.querySelectorAll(uploadTemplate).length) {
                        return ej2_base_1.compile(document.querySelector(uploadTemplate).innerHTML.trim());
                    }
                }
                catch (exception) {
                    return ej2_base_1.compile(uploadTemplate);
                }
            }
            return undefined;
        };
        Uploader.prototype.setRTL = function () {
            this.enableRtl ? ej2_base_3.addClass([this.uploadWrapper], RTL) : ej2_base_3.removeClass([this.uploadWrapper], RTL);
        };
        Uploader.prototype.localizedTexts = function (localeText) {
            this.l10n.setLocale(this.locale);
            return this.l10n.getConstant(localeText);
        };
        Uploader.prototype.setControlStatus = function () {
            if (!this.enabled) {
                this.uploadWrapper.classList.add(DISABLED);
                this.element.setAttribute('disabled', 'disabled');
                this.browseButton.setAttribute('disabled', 'disabled');
                if (!ej2_base_1.isNullOrUndefined(this.clearButton)) {
                    this.clearButton.setAttribute('disabled', 'disabled');
                }
                if (!ej2_base_1.isNullOrUndefined(this.uploadButton)) {
                    this.uploadButton.setAttribute('disabled', 'disabled');
                }
            }
            else {
                if (this.uploadWrapper.classList.contains(DISABLED)) {
                    this.uploadWrapper.classList.remove(DISABLED);
                }
                if (!ej2_base_1.isNullOrUndefined(this.browseButton) && this.element.hasAttribute('disabled')) {
                    this.element.removeAttribute('disabled');
                    this.browseButton.removeAttribute('disabled');
                }
                if (!ej2_base_1.isNullOrUndefined(this.clearButton) && this.clearButton.hasAttribute('disabled')) {
                    this.clearButton.removeAttribute('disabled');
                }
                if (!ej2_base_1.isNullOrUndefined(this.uploadButton) && this.uploadButton.hasAttribute('disabled')) {
                    this.uploadButton.hasAttribute('disabled');
                }
            }
        };
        Uploader.prototype.checkHTMLAttributes = function () {
            if (this.element.hasAttribute('accept')) {
                this.allowedExtensions = this.element.getAttribute('accept');
                this.initialAttr.accept = this.allowedExtensions;
            }
            if (this.element.hasAttribute('multiple')) {
                this.multiple = true;
                this.initialAttr.multiple = true;
            }
            if (this.element.hasAttribute('disabled')) {
                this.enabled = false;
                this.initialAttr.disabled = true;
            }
        };
        /**
         * It is used to convert bytes value into kilobytes or megabytes depending on the size based
         * on [binary prefix](https://en.wikipedia.org/wiki/Binary_prefix).
         * @param { number } bytes - specifies the file size in bytes.
         * @returns string
         */
        Uploader.prototype.bytesToSize = function (bytes) {
            var i = -1;
            var size;
            if (!bytes) {
                return '0.0 KB';
            }
            do {
                bytes = bytes / 1000;
                i++;
            } while (bytes > 99);
            if (i >= 2) {
                bytes = bytes * 1000;
                i = 1;
            }
            return Math.max(bytes, 0).toFixed(1) + ' ' + ['KB', 'MB'][i];
        };
        /**
         * Allows you to sort the file data alphabetically based on its file name clearly.
         * @param { FileList } filesData - specifies the files data for upload.
         * @returns File[]
         */
        Uploader.prototype.sortFileList = function (filesData) {
            var files = filesData;
            var fileNames = [];
            for (var i = 0; i < files.length; i++) {
                fileNames.push(files[i].name);
            }
            var sortedFileNames = fileNames.sort();
            var sortedFilesData = [];
            var index = 0;
            for (var _i = 0, sortedFileNames_1 = sortedFileNames; _i < sortedFileNames_1.length; _i++) {
                var name_1 = sortedFileNames_1[_i];
                for (var i = 0; i < files.length; i++) {
                    if (name_1 === files[i].name) {
                        sortedFilesData.push(files[i]);
                    }
                }
            }
            return sortedFilesData;
        };
        /**
         * Removes the component from the DOM and detaches all its related event handlers. Also it removes the attributes and classes.
         * @method destroy
         * @return {void}.
         */
        Uploader.prototype.destroy = function () {
            this.element.value = null;
            this.clearAll();
            this.unWireEvents();
            this.unBindDropEvents();
            if (this.multiple) {
                this.element.removeAttribute('multiple');
            }
            if (!this.enabled) {
                this.element.removeAttribute('disabled');
            }
            this.element.removeAttribute('accept');
            this.setInitialAttributes();
            this.uploadWrapper.parentElement.appendChild(this.cloneElement);
            this.cloneElement.classList.remove('e-control', ROOT);
            ej2_base_2.detach(this.uploadWrapper);
            this.uploadWrapper = null;
            _super.prototype.destroy.call(this);
        };
        /**
         * Allows you to call the upload process manually by calling save URL action.
         * To process the selected files (added in upload queue), pass an empty argument otherwise
         * upload the specific file based on its argument.
         * @param { FileInfo[] } files - specifies the files data for upload.
         * @returns void
         */
        Uploader.prototype.upload = function (files, custom) {
            var _this = this;
            var selectedFiles = [];
            if (this.asyncSettings.saveUrl === '' || ej2_base_1.isNullOrUndefined(this.asyncSettings.saveUrl)) {
                return;
            }
            if (!custom || ej2_base_1.isNullOrUndefined(custom)) {
                if (!this.multiple) {
                    var file = [];
                    file.push(files[0]);
                    selectedFiles = this.filterfileList(file);
                }
                else {
                    selectedFiles = this.filterfileList(files);
                }
            }
            else {
                selectedFiles = files;
            }
            var _loop_1 = function (i) {
                var ajax = new XMLHttpRequest();
                var formData = new FormData();
                if (selectedFiles[i].statusCode === '1') {
                    var eventArgs = {
                        fileData: selectedFiles[i],
                        customFormData: [{}],
                        cancel: false
                    };
                    this_1.trigger('uploading', eventArgs);
                    if (eventArgs.cancel) {
                        return { value: void 0 };
                    }
                    var name_2 = this_1.element.getAttribute('name');
                    formData.append(name_2, selectedFiles[i].rawFile, selectedFiles[i].name);
                    if (eventArgs.customFormData.length > 0) {
                        var datas = eventArgs.customFormData;
                        for (var i_1 = 0; i_1 < eventArgs.customFormData.length; i_1++) {
                            var customData = eventArgs.customFormData[i_1];
                            // tslint:disable-next-line
                            formData.append(Object.keys(customData)[0], Object.values(customData)[0]);
                        }
                    }
                    ajax.addEventListener('load', function (e) { _this.uploadComplete(e, selectedFiles[i], custom); }, false);
                    /* istanbul ignore next */
                    ajax.addEventListener('error', function (e) { _this.uploadFailed(e, selectedFiles[i]); }, false);
                    ajax.upload.addEventListener('progress', function (e) { _this.uploadInProgress(e, selectedFiles[i], custom); }, false);
                    ajax.open('POST', this_1.asyncSettings.saveUrl);
                    ajax.send(formData);
                }
            };
            var this_1 = this;
            for (var i = 0; i < selectedFiles.length; i++) {
                var state_1 = _loop_1(i);
                if (typeof state_1 === "object")
                    return state_1.value;
            }
        };
        /**
         * Remove the uploaded file from server manually by calling the remove URL action.
         * If you pass an empty argument to this method, the complete file list can be cleared,
         * otherwise remove the specific file based on its argument (“file_data”).
         * @param { FileInfo | FileInfo[] } fileData - specifies the files data to remove from file list/server.
         * @returns void
         */
        Uploader.prototype.remove = function (fileData, customTemplate) {
            var removeFiles = [];
            fileData = !ej2_base_1.isNullOrUndefined(fileData) ? fileData : this.filesData;
            if (fileData instanceof Array) {
                removeFiles = fileData;
            }
            else {
                removeFiles.push(fileData);
            }
            var eventArgs = {
                cancel: false,
                filesData: removeFiles
            };
            this.trigger('removing', eventArgs);
            if (eventArgs.cancel) {
                return;
            }
            var removeUrl = this.asyncSettings.removeUrl;
            var validUrl = (removeUrl === '' || ej2_base_1.isNullOrUndefined(removeUrl)) ? false : true;
            for (var _i = 0, removeFiles_1 = removeFiles; _i < removeFiles_1.length; _i++) {
                var files = removeFiles_1[_i];
                if (files.statusCode === '2' && validUrl) {
                    this.removeUploadedFile(files, customTemplate);
                }
                else {
                    this.removeFilesData(files, customTemplate);
                }
            }
        };
        /**
         * Clear all the file entries from list that can be uploaded files or added in upload queue.
         * @returns void
         */
        Uploader.prototype.clearAll = function () {
            if (ej2_base_1.isNullOrUndefined(this.listParent)) {
                return;
            }
            var eventArgs = {
                cancel: false,
                filesData: this.filesData
            };
            this.trigger('clearing', eventArgs);
            if (eventArgs.cancel) {
                return;
            }
            this.clearData();
        };
        Uploader.prototype.getFilesData = function () {
            return this.filesData;
        };
        __decorate([
            ej2_base_4.Complex({ saveUrl: '', removeUrl: '' }, AsyncSettings)
        ], Uploader.prototype, "asyncSettings", void 0);
        __decorate([
            ej2_base_1.Property(false)
        ], Uploader.prototype, "enableRtl", void 0);
        __decorate([
            ej2_base_1.Property(true)
        ], Uploader.prototype, "enabled", void 0);
        __decorate([
            ej2_base_1.Property(null)
        ], Uploader.prototype, "template", void 0);
        __decorate([
            ej2_base_1.Property(true)
        ], Uploader.prototype, "multiple", void 0);
        __decorate([
            ej2_base_1.Property(true)
        ], Uploader.prototype, "autoUpload", void 0);
        __decorate([
            ej2_base_4.Complex({}, ButtonsProps)
        ], Uploader.prototype, "buttons", void 0);
        __decorate([
            ej2_base_1.Property('')
        ], Uploader.prototype, "allowedExtensions", void 0);
        __decorate([
            ej2_base_1.Property(0)
        ], Uploader.prototype, "minFileSize", void 0);
        __decorate([
            ej2_base_1.Property(30000000)
        ], Uploader.prototype, "maxFileSize", void 0);
        __decorate([
            ej2_base_1.Property(null)
        ], Uploader.prototype, "dropArea", void 0);
        __decorate([
            ej2_base_4.Collection([{}], FilesProp)
        ], Uploader.prototype, "files", void 0);
        __decorate([
            ej2_base_1.Property(true)
        ], Uploader.prototype, "showFileList", void 0);
        __decorate([
            ej2_base_1.Event()
        ], Uploader.prototype, "selected", void 0);
        __decorate([
            ej2_base_1.Event()
        ], Uploader.prototype, "uploading", void 0);
        __decorate([
            ej2_base_1.Event()
        ], Uploader.prototype, "success", void 0);
        __decorate([
            ej2_base_1.Event()
        ], Uploader.prototype, "failure", void 0);
        __decorate([
            ej2_base_1.Event()
        ], Uploader.prototype, "removing", void 0);
        __decorate([
            ej2_base_1.Event()
        ], Uploader.prototype, "clearing", void 0);
        __decorate([
            ej2_base_1.Event()
        ], Uploader.prototype, "progress", void 0);
        __decorate([
            ej2_base_1.Event()
        ], Uploader.prototype, "change", void 0);
        Uploader = __decorate([
            ej2_base_2.NotifyPropertyChanges
        ], Uploader);
        return Uploader;
    }(ej2_base_1.Component));
    exports.Uploader = Uploader;
});
