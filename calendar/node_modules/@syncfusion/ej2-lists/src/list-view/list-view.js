var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
define(["require", "exports", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "@syncfusion/ej2-data", "@syncfusion/ej2-buttons", "../common/list-base"], function (require, exports, ej2_base_1, ej2_base_2, ej2_base_3, ej2_base_4, ej2_base_5, ej2_data_1, ej2_buttons_1, list_base_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var effectsConfig = {
        'None': [],
        'SlideLeft': ['SlideRightOut', 'SlideLeftOut', 'SlideLeftIn', 'SlideRightIn'],
        'SlideDown': ['SlideTopOut', 'SlideBottomOut', 'SlideBottomIn', 'SlideTopIn'],
        'Zoom': ['FadeOut', 'FadeZoomOut', 'FadeZoomIn', 'FadeIn'],
        'Fade': ['FadeOut', 'FadeOut', 'FadeIn', 'FadeIn']
    };
    var effectsRTLConfig = {
        'None': [],
        'SlideLeft': ['SlideLeftOut', 'SlideRightOut', 'SlideRightIn', 'SlideLeftIn'],
        'SlideDown': ['SlideBottomOut', 'SlideTopOut', 'SlideTopIn', 'SlideBottomIn'],
        'Zoom': ['FadeZoomOut', 'FadeOut', 'FadeIn', 'FadeZoomIn'],
        'Fade': ['FadeOut', 'FadeOut', 'FadeIn', 'FadeIn']
    };
    var classNames = {
        root: 'e-listview',
        hover: 'e-hover',
        selected: 'e-active',
        focused: 'e-focused',
        parentItem: 'e-list-parent',
        listItem: 'e-list-item',
        listItemText: 'e-list-text',
        grpListItem: 'e-list-group-item',
        hasChild: 'e-has-child',
        view: 'e-view',
        header: 'e-list-header',
        headerText: 'e-headertext',
        text: 'e-text',
        disable: 'e-disabled',
        content: 'e-content',
        icon: 'e-icons',
        backIcon: 'e-icon-back',
        checkboxWrapper: 'e-checkbox-wrapper',
        checkbox: 'e-checkbox',
        checked: 'e-check',
        checkboxIcon: 'e-frame',
        checkboxRight: 'e-checkbox-right',
        checkboxLeft: 'e-checkbox-left'
    };
    var FieldSettings = (function (_super) {
        __extends(FieldSettings, _super);
        function FieldSettings() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        __decorate([
            ej2_base_3.Property('id')
        ], FieldSettings.prototype, "id", void 0);
        __decorate([
            ej2_base_3.Property('text')
        ], FieldSettings.prototype, "text", void 0);
        __decorate([
            ej2_base_3.Property('isChecked')
        ], FieldSettings.prototype, "isChecked", void 0);
        __decorate([
            ej2_base_3.Property('isVisible')
        ], FieldSettings.prototype, "isVisible", void 0);
        __decorate([
            ej2_base_3.Property('enabled')
        ], FieldSettings.prototype, "enabled", void 0);
        __decorate([
            ej2_base_3.Property('iconCss')
        ], FieldSettings.prototype, "iconCss", void 0);
        __decorate([
            ej2_base_3.Property('child')
        ], FieldSettings.prototype, "child", void 0);
        __decorate([
            ej2_base_3.Property('tooltip')
        ], FieldSettings.prototype, "tooltip", void 0);
        __decorate([
            ej2_base_3.Property('groupBy')
        ], FieldSettings.prototype, "groupBy", void 0);
        __decorate([
            ej2_base_3.Property('text')
        ], FieldSettings.prototype, "sortBy", void 0);
        __decorate([
            ej2_base_3.Property('htmlAttributes')
        ], FieldSettings.prototype, "htmlAttributes", void 0);
        __decorate([
            ej2_base_3.Property('tableName')
        ], FieldSettings.prototype, "tableName", void 0);
        return FieldSettings;
    }(ej2_base_4.ChildProperty));
    exports.FieldSettings = FieldSettings;
    var ListView = (function (_super) {
        __extends(ListView, _super);
        function ListView(options, element) {
            var _this = _super.call(this, options, element) || this;
            _this.curDSLevel = [];
            _this.curViewDS = [];
            _this.keyConfigs = {
                moveDown: 'downarrow',
                moveUp: 'uparrow',
                back: 'backspace',
                home: 'home',
                select: 'enter',
                end: 'end',
                tab: 'tab',
                space: 'space'
            };
            _this.animateOptions = {};
            _this.isNestedList = false;
            _this.currentLiElements = [];
            _this.resetList = false;
            _this.selectedData = [];
            _this.selectedId = [];
            _this.aniObj = new ej2_base_5.Animation(_this.animateOptions);
            return _this;
        }
        ListView.prototype.onPropertyChanged = function (newProp, oldProp) {
            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                var prop = _a[_i];
                switch (prop) {
                    case 'htmlAttributes':
                        this.setHTMLAttribute();
                        break;
                    case 'cssClass':
                        this.setCSSClass(oldProp.cssClass);
                        break;
                    case 'enable':
                        this.setEnable();
                        break;
                    case 'width':
                    case 'height':
                        this.setSize();
                        break;
                    case 'enableRtl':
                        this.setEnableRTL();
                        break;
                    case 'fields':
                        this.listBaseOption.fields = this.fields.properties;
                        this.reRender();
                        break;
                    case 'headerTitle':
                        if (!this.curDSLevel.length) {
                            this.header(this.headerTitle, false);
                        }
                        break;
                    case 'showHeader':
                        {
                            this.header(this.headerTitle, false);
                        }
                        break;
                    case 'showCheckBox':
                    case 'checkBoxPosition':
                        this.setCheckbox();
                        break;
                    case 'dataSource':
                        this.reRender();
                        break;
                    case 'sortOrder':
                    case 'showIcon':
                        this.listBaseOption.showIcon = this.showIcon;
                        this.curViewDS = this.getSubDS();
                        this.resetCurrentList();
                        break;
                    default:
                        break;
                }
            }
        };
        ListView.prototype.setHTMLAttribute = function () {
            if (Object.keys(this.htmlAttributes).length) {
                ej2_base_2.attributes(this.element, this.htmlAttributes);
            }
        };
        ListView.prototype.setCSSClass = function (oldCSSClass) {
            if (this.cssClass) {
                ej2_base_2.addClass([this.element], this.cssClass.split(' '));
            }
            if (oldCSSClass) {
                ej2_base_2.removeClass([this.element], oldCSSClass.split(' '));
            }
        };
        ListView.prototype.setSize = function () {
            this.element.style.height = ej2_base_1.formatUnit(this.height);
            this.element.style.width = ej2_base_1.formatUnit(this.width);
        };
        ListView.prototype.setEnable = function () {
            this.enableElement(this.element, this.enable);
        };
        ListView.prototype.setEnableRTL = function () {
            if (this.enableRtl) {
                this.element.classList.add('e-rtl');
            }
            else {
                this.element.classList.remove('e-rtl');
            }
        };
        ListView.prototype.enableElement = function (element, isEnabled) {
            if (isEnabled) {
                element.classList.remove(classNames.disable);
            }
            else {
                element.classList.add(classNames.disable);
            }
        };
        ListView.prototype.header = function (text, showBack) {
            if (this.headerEle === undefined && this.showHeader) {
                this.headerEle = ej2_base_2.createElement('div', { className: classNames.header });
                var innerHeaderEle = ej2_base_2.createElement('span', { className: classNames.headerText, innerHTML: this.headerTitle });
                var textEle = ej2_base_2.createElement('div', { className: classNames.text, innerHTML: innerHeaderEle.outerHTML });
                var hedBackButton = ej2_base_2.createElement('div', {
                    className: classNames.icon + ' ' + classNames.backIcon + ' e-but-back',
                    attrs: { style: 'display:none;' }
                });
                this.headerEle.appendChild(hedBackButton);
                this.headerEle.appendChild(textEle);
                this.element.classList.add('e-has-header');
                ej2_base_2.prepend([this.headerEle], this.element);
            }
            else if (this.headerEle) {
                if (this.showHeader) {
                    this.headerEle.style.display = '';
                    var textEle = this.headerEle.querySelector('.' + classNames.headerText);
                    var hedBackButton = this.headerEle.querySelector('.' + classNames.backIcon);
                    textEle.innerHTML = text;
                    if (showBack === true) {
                        hedBackButton.style.display = '';
                    }
                    else {
                        hedBackButton.style.display = 'none';
                    }
                }
                else {
                    this.headerEle.style.display = 'none';
                }
            }
        };
        ListView.prototype.switchView = function (fromView, toView, reverse) {
            var _this = this;
            if (fromView && toView) {
                var fPos_1 = fromView.style.position;
                var overflow_1 = (this.element.style.overflow !== 'hidden') ? this.element.style.overflow : '';
                fromView.style.position = 'absolute';
                fromView.classList.add('e-view');
                var anim = void 0;
                var duration = this.animation.duration;
                if (this.animation.effect) {
                    anim = (this.enableRtl ? effectsRTLConfig[this.animation.effect] : effectsConfig[this.animation.effect]);
                }
                else {
                    var slideLeft = 'SlideLeft';
                    anim = effectsConfig[slideLeft];
                    reverse = this.enableRtl;
                    duration = 0;
                }
                this.element.style.overflow = 'hidden';
                this.aniObj.animate(fromView, {
                    name: (reverse === true ? anim[0] : anim[1]),
                    duration: duration,
                    timingFunction: this.animation.easing,
                    end: function (model) {
                        fromView.style.display = 'none';
                        _this.element.style.overflow = overflow_1;
                        fromView.style.position = fPos_1;
                        fromView.classList.remove('e-view');
                    }
                });
                toView.style.display = '';
                this.aniObj.animate(toView, {
                    name: (reverse === true ? anim[2] : anim[3]),
                    duration: duration,
                    timingFunction: this.animation.easing,
                    end: function () {
                        _this.trigger('actionComplete');
                    }
                });
                this.curUL = toView;
            }
        };
        ListView.prototype.preRender = function () {
            this.listBaseOption = {
                template: this.template,
                groupTemplate: this.groupTemplate, expandCollapse: true, listClass: '',
                ariaAttributes: {
                    itemRole: 'listitem', listRole: 'list', itemText: '',
                    groupItemRole: 'group', wrapperRole: 'presentation'
                },
                fields: this.fields.properties, sortOrder: this.sortOrder, showIcon: this.showIcon,
                itemCreated: this.renderCheckbox.bind(this)
            };
        };
        ListView.prototype.renderCheckbox = function (args) {
            if (this.showCheckBox && this.isValidLI(args.item) && !this.isNestedList) {
                if (args.item.classList.contains(classNames.hasChild)) {
                    this.checkboxRevert();
                }
                else {
                    var checkboxElement = void 0;
                    var fieldData = void 0;
                    checkboxElement = ej2_buttons_1.createCheckBox(false, { checked: false, enableRtl: this.enableRtl });
                    checkboxElement.setAttribute('role', 'checkbox');
                    var frameElement_1 = checkboxElement.querySelector('.' + classNames.checkboxIcon);
                    args.item.classList.add('e-checklist');
                    args.item.firstElementChild.classList.add(classNames.checkbox);
                    if (typeof this.dataSource[0] !== 'string') {
                        fieldData = list_base_1.getFieldValues(args.curData, this.listBaseOption.fields);
                        if (!this.resetList && fieldData[this.listBaseOption.fields.isChecked]) {
                            this.checkItem(args, checkboxElement);
                        }
                        else if (this.selectedData.indexOf(fieldData[this.listBaseOption.fields.text]) !== -1 &&
                            this.selectedId.indexOf(fieldData[this.listBaseOption.fields.id]) !== -1) {
                            this.checkItem(args, checkboxElement);
                        }
                    }
                    else if (typeof this.dataSource[0] === 'string' && this.selectedData.indexOf(args.text) !== -1) {
                        this.checkItem(args, checkboxElement);
                    }
                    checkboxElement.setAttribute('aria-checked', frameElement_1.classList.contains(classNames.checked) ? 'true' : 'false');
                    if (this.checkBoxPosition === 'Left') {
                        checkboxElement.classList.add(classNames.checkboxLeft);
                        args.item.firstElementChild.insertBefore(checkboxElement, args.item.firstElementChild.childNodes[0]);
                    }
                    else {
                        checkboxElement.classList.add(classNames.checkboxRight);
                        args.item.firstElementChild.appendChild(checkboxElement);
                    }
                    this.currentLiElements.push(args.item);
                }
            }
        };
        ListView.prototype.checkItem = function (args, checkboxElement) {
            args.item.classList.add(classNames.selected);
            checkboxElement.querySelector('.' + classNames.checkboxIcon).classList.add(classNames.checked);
            checkboxElement.setAttribute('aria-checked', 'true');
        };
        ListView.prototype.checkboxRevert = function () {
            this.isNestedList = true;
            this.setProperties({ 'showCheckBox': false }, true);
            for (var i = 0; i < this.currentLiElements.length; i++) {
                if (this.currentLiElements[i].querySelector('.' + classNames.checkboxWrapper)) {
                    this.currentLiElements[i].firstElementChild.classList.remove(classNames.checkbox);
                    this.removeElement(this.currentLiElements[i].firstElementChild.firstElementChild);
                }
            }
        };
        ListView.prototype.setCheckbox = function () {
            var _this = this;
            if (this.showCheckBox && !this.curUL.querySelector('.' + classNames.hasChild)) {
                var args_1 = {
                    item: undefined, curData: undefined, dataSource: undefined, fields: undefined,
                    options: undefined, text: ''
                };
                this.liCollection.forEach(function (element) {
                    args_1.item = element;
                    args_1.curData = _this.getItemData(element);
                    if (element.querySelector('.' + classNames.checkboxWrapper)) {
                        _this.removeElement(element.querySelector('.' + classNames.checkboxWrapper));
                    }
                    _this.renderCheckbox(args_1);
                });
            }
            else {
                this.liCollection.forEach(function (element) {
                    element.firstElementChild.classList.remove(classNames.checkbox);
                    if (element.querySelector('.' + classNames.checkboxWrapper)) {
                        _this.removeElement(element.querySelector('.' + classNames.checkboxWrapper));
                    }
                });
            }
        };
        ListView.prototype.clickHandler = function (e) {
            var target = e.target;
            var classList = target.classList;
            if (classList.contains(classNames.backIcon) || classList.contains(classNames.headerText)) {
                this.back();
            }
            else {
                var li = ej2_base_2.closest(target.parentNode, '.' + classNames.listItem);
                if (li === null) {
                    li = target;
                }
                if (this.enable && this.showCheckBox && this.isValidLI(li)) {
                    this.setCheckboxLI(li, e);
                }
                else {
                    this.setSelectLI(li, e);
                }
            }
        };
        ListView.prototype.removeElement = function (element) {
            return element && element.parentNode && element.parentNode.removeChild(element);
        };
        ListView.prototype.hoverHandler = function (e) {
            var curLi = ej2_base_2.closest(e.target.parentNode, '.' + classNames.listItem);
            this.setHoverLI(curLi);
        };
        ListView.prototype.leaveHandler = function (e) {
            this.removeHover();
        };
        ;
        ListView.prototype.homeKeyHandler = function (e, end) {
            var li = this.curUL.querySelectorAll('.' + classNames.listItem);
            var focusedElement = this.curUL.querySelector('.' + classNames.focused) ||
                this.curUL.querySelector('.' + classNames.selected);
            if (focusedElement) {
                focusedElement.classList.remove(classNames.focused);
                if (!this.showCheckBox) {
                    focusedElement.classList.remove(classNames.selected);
                }
            }
            var index = !end ? 0 : li.length - 1;
            if (li[index].classList.contains(classNames.hasChild) || this.showCheckBox) {
                li[index].classList.add(classNames.focused);
            }
            else {
                this.setSelectLI(li[index], e);
            }
        };
        ListView.prototype.arrowKeyHandler = function (e, prev) {
            var siblingLI;
            var li;
            var hasChild = !ej2_base_1.isNullOrUndefined(this.curUL.querySelector('.' + classNames.hasChild)) ? true : false;
            if (hasChild || this.showCheckBox) {
                li = this.curUL.querySelector('.' + classNames.focused) || this.curUL.querySelector('.' + classNames.selected);
                siblingLI = list_base_1.ListBase.getSiblingLI(this.curUL.querySelectorAll('.' + classNames.listItem), li, prev);
                if (!ej2_base_1.isNullOrUndefined(siblingLI)) {
                    if (li) {
                        li.classList.remove(classNames.focused);
                        if (!this.showCheckBox) {
                            li.classList.remove(classNames.selected);
                        }
                    }
                    if (siblingLI.classList.contains(classNames.hasChild) || this.showCheckBox) {
                        siblingLI.classList.add(classNames.focused);
                    }
                    else {
                        this.setSelectLI(siblingLI, e);
                    }
                }
            }
            else {
                li = this.curUL.querySelector('.' + classNames.selected);
                siblingLI = list_base_1.ListBase.getSiblingLI(this.curUL.querySelectorAll('.' + classNames.listItem), li, prev);
                this.setSelectLI(siblingLI, e);
            }
        };
        ListView.prototype.enterKeyHandler = function (e) {
            var hasChild = !ej2_base_1.isNullOrUndefined(this.curUL.querySelector('.' + classNames.hasChild)) ? true : false;
            var li = this.curUL.querySelector('.' + classNames.focused);
            if (hasChild && li) {
                li.classList.remove(classNames.focused);
                this.setSelectLI(li, e);
            }
        };
        ListView.prototype.spaceKeyHandler = function (e) {
            if (this.enable && this.showCheckBox) {
                var li = this.curUL.querySelector('.' + classNames.focused);
                this.setCheckboxLI(li, e);
            }
        };
        ListView.prototype.keyActionHandler = function (e) {
            e.preventDefault();
            switch (e.action) {
                case 'home':
                    this.homeKeyHandler(e);
                    break;
                case 'end':
                    this.homeKeyHandler(e, true);
                    break;
                case 'moveDown':
                    this.arrowKeyHandler(e);
                    break;
                case 'moveUp':
                    this.arrowKeyHandler(e, true);
                    break;
                case 'select':
                    this.enterKeyHandler(e);
                    break;
                case 'back':
                    this.back();
                    break;
                case 'tab':
                    this.tabFocus(e);
                    break;
                case 'space':
                    this.spaceKeyHandler(e);
                    break;
            }
        };
        ListView.prototype.swipeActionHandler = function (e) {
            if (e.swipeDirection === 'Right') {
                this.back();
            }
        };
        ListView.prototype.focusout = function () {
            var focusedElement = this.curUL.querySelector('.' + classNames.focused);
            var activeElement = this.curUL.querySelector('[aria-selected = true]');
            if (focusedElement && !this.showCheckBox) {
                focusedElement.classList.remove(classNames.focused);
                if (activeElement) {
                    activeElement.classList.add(classNames.selected);
                }
            }
        };
        ListView.prototype.wireEvents = function () {
            ej2_base_3.EventHandler.add(this.element, 'click', this.clickHandler, this);
            ej2_base_3.EventHandler.add(this.element, 'mouseover', this.hoverHandler, this);
            ej2_base_3.EventHandler.add(this.element, 'mouseout', this.leaveHandler, this);
            ej2_base_3.EventHandler.add(this.element, 'focusout', this.focusout, this);
            this.keyboardModule = new ej2_base_4.KeyboardEvents(this.element, {
                keyAction: this.keyActionHandler.bind(this),
                keyConfigs: this.keyConfigs
            });
            this.touchModule = new ej2_base_5.Touch(this.element, { swipe: this.swipeActionHandler.bind(this) });
        };
        ListView.prototype.unWireEvents = function () {
            ej2_base_3.EventHandler.remove(this.element, 'click', this.clickHandler);
            ej2_base_3.EventHandler.remove(this.element, 'mouseover', this.hoverHandler);
            ej2_base_3.EventHandler.remove(this.element, 'mouseout', this.leaveHandler);
            this.keyboardModule.destroy();
            this.touchModule.destroy();
        };
        ListView.prototype.tabFocus = function (e) {
            var selectedList = this.curUL.querySelector('.' + classNames.selected);
            if ((!selectedList && this.curUL) || this.showCheckBox) {
                var li = this.curUL.querySelector('.' + classNames.listItem);
                if (li.classList.contains(classNames.hasChild) || this.showCheckBox) {
                    var focusedElement = this.curUL.querySelector('.' + classNames.focused);
                    if (ej2_base_1.isNullOrUndefined(focusedElement)) {
                        li.classList.add(classNames.focused);
                    }
                }
                else {
                    this.setSelectLI(li, e);
                }
            }
        };
        ListView.prototype.removeHover = function () {
            var hoverLI = this.element.querySelector('.' + classNames.hover);
            if (hoverLI) {
                hoverLI.classList.remove(classNames.hover);
            }
        };
        ListView.prototype.removeSelect = function () {
            var selectedLI = this.element.querySelectorAll('[aria-selected = true]');
            for (var _i = 0, selectedLI_1 = selectedLI; _i < selectedLI_1.length; _i++) {
                var ele = selectedLI_1[_i];
                ele.removeAttribute('aria-selected');
                if (ele.className !== '') {
                    ele.classList.remove(classNames.selected);
                }
            }
        };
        ListView.prototype.isValidLI = function (li) {
            return (li && li.classList.contains(classNames.listItem)
                && !li.classList.contains(classNames.grpListItem)
                && !li.classList.contains(classNames.disable));
        };
        ListView.prototype.setCheckboxLI = function (li, e) {
            if (this.isValidLI(li) && this.enable && this.showCheckBox) {
                if (this.curUL.querySelector('.' + classNames.focused)) {
                    this.curUL.querySelector('.' + classNames.focused).classList.remove(classNames.focused);
                }
                li.classList.add(classNames.focused);
                var checkboxElement = li.querySelector('.' + classNames.checkboxWrapper);
                var checkIcon = checkboxElement.querySelector('.' + classNames.checkboxIcon + '.' + classNames.icon);
                this.removeHover();
                if (!checkIcon.classList.contains(classNames.checked)) {
                    checkIcon.classList.add(classNames.checked);
                    li.classList.add(classNames.selected);
                }
                else {
                    checkIcon.classList.remove(classNames.checked);
                    li.classList.remove(classNames.selected);
                }
                checkboxElement.setAttribute('aria-checked', checkIcon.classList.contains(classNames.checked) ?
                    'true' : 'false');
                if (e) {
                    var eventArgs = this.selectEventData(li, e);
                    ej2_base_1.merge(eventArgs, { isChecked: checkIcon.classList.contains(classNames.checked) });
                    this.trigger('select', eventArgs);
                }
            }
        };
        ListView.prototype.selectEventData = function (li, e) {
            var data = this.getItemData(li);
            var fieldData = list_base_1.getFieldValues(data, this.listBaseOption.fields);
            var selectedItem;
            if (ej2_base_1.isNullOrUndefined(data) && typeof this.dataSource[0] === 'string') {
                selectedItem = { item: li, text: li.innerText.trim(), data: this.dataSource };
            }
            else {
                selectedItem = { item: li, text: fieldData[this.listBaseOption.fields.text], data: data };
            }
            var eventArgs = {};
            ej2_base_1.merge(eventArgs, selectedItem);
            if (e) {
                ej2_base_1.merge(eventArgs, { isInteracted: true, event: e, index: Array.prototype.indexOf.call(this.curUL.children, li) });
            }
            return eventArgs;
        };
        ListView.prototype.setSelectLI = function (li, e) {
            if (this.isValidLI(li) && !li.classList.contains(classNames.selected) && this.enable) {
                this.removeSelect();
                li.classList.add(classNames.selected);
                li.setAttribute('aria-selected', 'true');
                this.removeHover();
                var eventArgs = this.selectEventData(li, e);
                this.trigger('select', eventArgs);
                this.selectedLI = li;
                this.renderSubList(li);
            }
        };
        ListView.prototype.setHoverLI = function (li) {
            if (this.isValidLI(li) && !li.classList.contains(classNames.hover) && this.enable) {
                var lastLi = this.element.querySelectorAll('.' + classNames.hover);
                if (lastLi && lastLi.length) {
                    ej2_base_2.removeClass(lastLi, classNames.hover);
                }
                if (!li.classList.contains(classNames.selected) || this.showCheckBox) {
                    li.classList.add(classNames.hover);
                }
            }
        };
        ListView.prototype.hoverSiblingLI = function (prev) {
            var lastLi = this.curUL.querySelector('.' + classNames.hover);
            var siblingLI;
            if (!lastLi) {
                lastLi = this.curUL.querySelector('.' + classNames.selected);
            }
            if (lastLi) {
                siblingLI = list_base_1.ListBase.getSiblingLI(this.curUL.querySelectorAll('.' + classNames.listItem), lastLi, prev);
            }
            else {
                if (prev) {
                    var curLIs = this.curUL.querySelectorAll('.' + classNames.listItem);
                    siblingLI = curLIs[curLIs.length - 1];
                }
                else {
                    siblingLI = this.curUL.querySelector('.' + classNames.listItem);
                }
            }
            this.setHoverLI(siblingLI);
        };
        ListView.prototype.getSubDS = function () {
            var levelKeys = this.curDSLevel;
            if (levelKeys.length) {
                var ds = this.localData;
                for (var _i = 0, levelKeys_1 = levelKeys; _i < levelKeys_1.length; _i++) {
                    var key = levelKeys_1[_i];
                    this.curDSJSON = this.findItemFromDS(ds, { id: key });
                    var fieldData = list_base_1.getFieldValues(this.curDSJSON, this.listBaseOption.fields);
                    ds = this.curDSJSON ? fieldData[this.fields.child] : ds;
                }
                return ds;
            }
            return this.localData;
        };
        ListView.prototype.getItemData = function (li) {
            var fields = this.getElementUID(li);
            var curDS = this.dataSource;
            return this.findItemFromDS(curDS, fields);
        };
        ListView.prototype.findItemFromDS = function (dataSource, fields, parent) {
            var _this = this;
            var resultJSON;
            if (dataSource && dataSource.length && fields) {
                dataSource.some(function (data) {
                    var fieldData = list_base_1.getFieldValues(data, _this.listBaseOption.fields);
                    if ((fields.id || fields.text) &&
                        (!fields.id || fieldData[_this.fields.id] === fields.id) &&
                        (!fields.text || fieldData[_this.fields.text] === fields.text)) {
                        resultJSON = (parent ? dataSource : data);
                    }
                    else if (!ej2_base_1.isNullOrUndefined(fields.id) && ej2_base_1.isNullOrUndefined(fieldData[_this.fields.id])) {
                        var li = _this.element.querySelector('[data-uid="'
                            + fields.id + '"]');
                        if (li.innerText.trim() === fieldData[_this.fields.text]) {
                            resultJSON = data;
                        }
                    }
                    else if (fieldData.hasOwnProperty(_this.fields.child) && fieldData[_this.fields.child].length) {
                        resultJSON = _this.findItemFromDS(fieldData[_this.fields.child], fields, parent);
                    }
                    return !!resultJSON;
                });
            }
            else {
                resultJSON = dataSource;
            }
            return resultJSON;
        };
        ListView.prototype.getQuery = function () {
            var columns = [];
            var query = (this.query ? this.query : new ej2_data_1.Query());
            if (!this.query) {
                for (var _i = 0, _a = Object.keys(this.fields.properties); _i < _a.length; _i++) {
                    var column = _a[_i];
                    if (column !== 'tableName' && !!(this.fields[column]) &&
                        this.fields[column] !==
                            list_base_1.ListBase.defaultMappedFields[column]
                        && columns.indexOf(this.fields[column]) === -1) {
                        columns.push(this.fields[column]);
                    }
                }
                query.select(columns);
                if (this.fields.properties.hasOwnProperty('tableName')) {
                    query.from(this.fields.tableName);
                }
            }
            return query;
        };
        ListView.prototype.setViewDataSource = function (dataSource) {
            if (dataSource === void 0) { dataSource = this.localData; }
            if (dataSource && this.fields.groupBy) {
                this.curViewDS = list_base_1.ListBase.groupDataSource(dataSource, this.fields, this.sortOrder);
            }
            else if (dataSource && this.sortOrder !== 'None') {
                this.curViewDS = list_base_1.ListBase.getDataSource(dataSource, list_base_1.ListBase.addSorting(this.sortOrder, this.fields.sortBy));
            }
            else {
                this.curViewDS = dataSource;
            }
        };
        ListView.prototype.isInAnimation = function () {
            return this.curUL.classList.contains('.e-animate');
        };
        ListView.prototype.setLocalData = function () {
            var _this = this;
            this.trigger('actionBegin');
            if (this.dataSource instanceof ej2_data_1.DataManager) {
                this.dataSource.executeQuery(this.getQuery()).then(function (e) {
                    if (_this.isDestroyed) {
                        return;
                    }
                    _this.localData = e.result;
                    _this.renderList();
                    _this.trigger('actionComplete', e);
                }).catch(function (e) {
                    if (_this.isDestroyed) {
                        return;
                    }
                    _this.trigger('actionFailure', e);
                });
            }
            else if (!this.dataSource || !this.dataSource.length) {
                var ul = this.element.querySelector('ul');
                if (ul) {
                    ej2_base_2.remove(ul);
                    this.setProperties({ dataSource: list_base_1.ListBase.createJsonFromElement(ul) }, true);
                    this.localData = this.dataSource;
                    this.renderList();
                    this.trigger('actionComplete', { data: this.localData });
                }
            }
            else {
                this.localData = this.dataSource;
                this.renderList();
                this.trigger('actionComplete', { data: this.localData });
            }
        };
        ListView.prototype.reRender = function () {
            this.element.innerHTML = '';
            this.curUL = this.headerEle = undefined;
            this.setLocalData();
            this.header();
        };
        ListView.prototype.resetCurrentList = function () {
            this.setViewDataSource(this.curViewDS);
            this.contentContainer.innerHTML = '';
            this.createList();
            this.renderIntoDom(this.curUL);
        };
        ListView.prototype.createList = function () {
            this.currentLiElements = [];
            this.ulElement = this.curUL = list_base_1.ListBase.createList(this.curViewDS, this.listBaseOption);
            this.liCollection = this.curUL.querySelectorAll('.' + classNames.listItem);
        };
        ListView.prototype.renderSubList = function (li) {
            var uID = li.getAttribute('data-uid');
            if (li.classList.contains(classNames.hasChild) && uID) {
                var ul = ej2_base_2.closest(li.parentNode, '.' + classNames.parentItem);
                var ele = this.element.querySelector('[pid=\'' + uID + '\']');
                this.curDSLevel.push(uID);
                this.setViewDataSource(this.getSubDS());
                if (!ele) {
                    ele = list_base_1.ListBase.createListFromJson(this.curViewDS, this.listBaseOption, this.curDSLevel.length);
                    ele.setAttribute('pID', uID);
                    ele.style.display = 'none';
                    this.renderIntoDom(ele);
                }
                this.switchView(ul, ele);
                this.liCollection = this.curUL.querySelectorAll('.' + classNames.listItem);
                var fieldData = list_base_1.getFieldValues(this.getSelectedItems().data, this.listBaseOption.fields);
                this.header((fieldData[this.listBaseOption.fields.text]), true);
                this.selectedLI = undefined;
            }
        };
        ListView.prototype.renderIntoDom = function (ele) {
            this.contentContainer.appendChild(ele);
        };
        ListView.prototype.renderList = function () {
            this.setViewDataSource();
            this.createList();
            this.contentContainer = ej2_base_2.createElement('div', { className: classNames.content });
            this.element.appendChild(this.contentContainer);
            this.renderIntoDom(this.ulElement);
        };
        ListView.prototype.getElementUID = function (obj) {
            var fields = {};
            if (obj instanceof Element) {
                fields.id = obj.getAttribute('data-uid');
            }
            else {
                fields = obj;
            }
            return fields;
        };
        ListView.prototype.render = function () {
            this.element.classList.add(classNames.root);
            ej2_base_2.attributes(this.element, { role: 'list', tabindex: '0' });
            this.setCSSClass();
            this.setEnableRTL();
            this.setEnable();
            this.setSize();
            this.wireEvents();
            this.header();
            this.setLocalData();
            this.setHTMLAttribute();
            this.rippleFn = ej2_base_5.rippleEffect(this.element, {
                selector: '.' + classNames.listItem
            });
        };
        ListView.prototype.destroy = function () {
            this.unWireEvents();
            var classAr = [classNames.root, this.cssClass, classNames.disable, 'e-rtl',
                'e-has-header'];
            ej2_base_2.removeClass([this.element], classAr);
            this.rippleFn();
            _super.prototype.destroy.call(this);
        };
        ListView.prototype.back = function () {
            var pID = this.curDSLevel[this.curDSLevel.length - 1];
            if (pID === undefined || this.isInAnimation()) {
                return;
            }
            this.curDSLevel.pop();
            this.setViewDataSource(this.getSubDS());
            var toUL = this.element.querySelector('[data-uid=\'' + pID + '\']');
            var fromUL = this.curUL;
            if (!toUL) {
                this.createList();
                this.renderIntoDom(this.ulElement);
                toUL = this.curUL;
            }
            else {
                toUL = toUL.parentElement;
            }
            var fieldData = list_base_1.getFieldValues(this.curDSJSON, this.listBaseOption.fields);
            var text = fieldData[this.fields.text];
            this.switchView(fromUL, toUL, true);
            this.removeSelect();
            this.liCollection = this.curUL.querySelectorAll('.' + classNames.listItem);
            this.header((this.curDSLevel.length ? text : this.headerTitle), (this.curDSLevel.length ? true : false));
        };
        ListView.prototype.selectItem = function (obj) {
            if (!ej2_base_1.isNullOrUndefined(obj)) {
                if (this.showCheckBox) {
                    this.setCheckboxLI(this.getLiFromObjOrElement(obj));
                }
                else {
                    this.setSelectLI(this.getLiFromObjOrElement(obj));
                }
            }
        };
        ListView.prototype.getLiFromObjOrElement = function (obj) {
            var li;
            if (!ej2_base_1.isNullOrUndefined(obj)) {
                if (typeof this.dataSource[0] === 'string') {
                    var uid = obj.getAttribute('data-uid').toString();
                    for (var i = 0; i < this.liCollection.length; i++) {
                        if (this.liCollection[i].getAttribute('data-uid').toString() === uid) {
                            li = this.liCollection[i];
                            break;
                        }
                    }
                }
                else {
                    var resultJSON = this.getItemData(obj);
                    var fieldData = list_base_1.getFieldValues(resultJSON, this.listBaseOption.fields);
                    if (resultJSON) {
                        li = this.element.querySelector('[data-uid="'
                            + fieldData[this.fields.id] + '"]');
                        if (ej2_base_1.isNullOrUndefined(li)) {
                            var curLi = this.element.querySelectorAll('.' + classNames.listItem);
                            for (var i = 0; i < curLi.length; i++) {
                                if (curLi[i].innerText.trim() === resultJSON.text) {
                                    li = curLi[i];
                                }
                            }
                        }
                    }
                }
            }
            return li;
        };
        ListView.prototype.selectMultipleItems = function (obj) {
            if (!ej2_base_1.isNullOrUndefined(obj)) {
                for (var i = 0; i < obj.length; i++) {
                    if (!ej2_base_1.isNullOrUndefined(obj[i])) {
                        this.selectItem(obj[i]);
                    }
                }
            }
        };
        ListView.prototype.getSelectedItems = function () {
            this.selectedId = [];
            if (this.showCheckBox) {
                var liCollection = this.element.getElementsByClassName(classNames.selected);
                var liTextCollection = [];
                var liDataCollection = [];
                this.selectedId = [];
                for (var i = 0; i < liCollection.length; i++) {
                    if (typeof this.dataSource[0] === 'string') {
                        liTextCollection.push(liCollection[i].innerText.trim());
                    }
                    else {
                        var fieldData = list_base_1.getFieldValues(this.getItemData(liCollection[i]), this.listBaseOption.fields);
                        liTextCollection.push(fieldData[this.listBaseOption.fields.text]);
                        liDataCollection.push(this.getItemData(liCollection[i]));
                        this.selectedId.push(fieldData[this.listBaseOption.fields.id]);
                    }
                }
                if (typeof this.dataSource[0] === 'string') {
                    return { item: liCollection, data: this.dataSource, text: liTextCollection };
                }
                else {
                    return { item: liCollection, data: liDataCollection, text: liTextCollection };
                }
            }
            else {
                var liElement = this.element.getElementsByClassName(classNames.selected)[0];
                var fieldData = list_base_1.getFieldValues(this.getItemData(liElement), this.listBaseOption.fields);
                if (typeof this.dataSource[0] === 'string') {
                    return (!ej2_base_1.isNullOrUndefined(liElement)) ? {
                        item: liElement, data: this.dataSource,
                        text: liElement.innerText.trim()
                    } : undefined;
                }
                else {
                    if (ej2_base_1.isNullOrUndefined(fieldData) || ej2_base_1.isNullOrUndefined(liElement)) {
                        return undefined;
                    }
                    else {
                        this.selectedId.push(fieldData[this.listBaseOption.fields.id]);
                        return { text: fieldData[this.listBaseOption.fields.text], item: liElement,
                            data: this.getItemData(liElement) };
                    }
                }
            }
        };
        ListView.prototype.findItem = function (fields) {
            return this.findItemFromDS(this.dataSource, fields);
        };
        ListView.prototype.enableItem = function (obj) {
            this.setItemState(obj, true);
        };
        ListView.prototype.disableItem = function (obj) {
            this.setItemState(obj, false);
        };
        ListView.prototype.setItemState = function (obj, isEnable) {
            var resultJSON = this.getItemData(obj);
            var fieldData = list_base_1.getFieldValues(resultJSON, this.listBaseOption.fields);
            if (resultJSON) {
                var li = this.element.querySelector('[data-uid="' + fieldData[this.fields.id] + '"]');
                if (isEnable) {
                    if (li) {
                        li.classList.remove(classNames.disable);
                    }
                    delete resultJSON[this.fields.enabled];
                }
                else if (!isEnable) {
                    if (li) {
                        li.classList.add(classNames.disable);
                    }
                    resultJSON[this.fields.enabled] = false;
                }
            }
        };
        ListView.prototype.showItem = function (obj) {
            this.showHideItem(obj, false, '');
        };
        ListView.prototype.hideItem = function (obj) {
            this.showHideItem(obj, true, 'none');
        };
        ListView.prototype.showHideItem = function (obj, isHide, display) {
            var resultJSON = this.getItemData(obj);
            var fieldData = list_base_1.getFieldValues(resultJSON, this.listBaseOption.fields);
            if (resultJSON) {
                var li = this.element.querySelector('[data-uid="' + fieldData[this.fields.id] + '"]');
                if (li) {
                    li.style.display = display;
                }
                if (isHide) {
                    resultJSON[this.fields.isVisible] = false;
                }
                else {
                    delete resultJSON[this.fields.isVisible];
                }
            }
        };
        ListView.prototype.addItem = function (data, fields) {
            var ds = this.findItemFromDS(this.dataSource, fields);
            var fieldData = list_base_1.getFieldValues(ds, this.listBaseOption.fields);
            var child = fieldData[this.fields.child];
            if (!child) {
                child = [];
            }
            child = child.concat(data);
            if (ds instanceof Array) {
                this.dataSource = this.localData = ds.concat(data);
                this.setViewDataSource();
            }
            else {
                ds[this.fields.child] = child;
            }
            this.resetCurrentList();
        };
        ListView.prototype.removeItem = function (obj) {
            this.removeItemFromList(obj, true);
        };
        ListView.prototype.removeItemFromList = function (obj, resetList) {
            var _this = this;
            var currentlySelectedItems = [];
            var selectedElements = [];
            var valid = false;
            if (typeof this.dataSource[0] === 'string') {
                if (typeof obj === 'object') {
                    var liCollection_1 = [];
                    var idx_1 = 0;
                    this.liCollection.forEach(function (element) {
                        if (element === obj) {
                            valid = true;
                            _this.removeElement(element);
                            _this.dataSource.splice(idx_1, 1);
                            _this.localData = _this.dataSource;
                        }
                        else {
                            liCollection_1.push(element);
                        }
                        idx_1++;
                    });
                    this.liCollection = liCollection_1;
                }
                else if (typeof obj === 'string') {
                    var liCollection_2 = [];
                    var idx_2 = 0;
                    var ds_1 = [];
                    this.liCollection.forEach(function (element) {
                        if (element.innerText.trim() === obj) {
                            valid = true;
                            _this.removeElement(element);
                        }
                        else {
                            liCollection_2.push(element);
                            ds_1.push(_this.dataSource[idx_2]);
                        }
                        idx_2++;
                    });
                    this.localData = this.curViewDS = this.dataSource = ds_1;
                    this.liCollection = liCollection_2;
                }
                var values = this.getSelectedItems();
                this.selectedData = (!ej2_base_1.isNullOrUndefined(values)) ? values.text : undefined;
                selectedElements = undefined;
                if (resetList && valid) {
                    this.resetList = true;
                    this.resetCurrentList();
                    if (!this.showCheckBox && this.selectedData && this.selectedData.length) {
                        this.removeSelect();
                        var index = this.dataSource.lastIndexOf(this.selectedData);
                        this.liCollection[index].classList.add(classNames.selected);
                        this.liCollection[index].setAttribute('aria-selected', 'true');
                    }
                    this.resetList = false;
                }
            }
            else {
                selectedElements = (!ej2_base_1.isNullOrUndefined(this.getSelectedItems())) ?
                    this.getSelectedItems().data : undefined;
                var fields_1 = this.getElementUID(obj);
                var curAr_1;
                var curDS = this.findItemFromDS(this.dataSource, fields_1, true);
                if (curDS && obj) {
                    var idx_3;
                    curDS.some(function (data, index, arr) {
                        var fieldData = list_base_1.getFieldValues(data, _this.listBaseOption.fields);
                        if ((fields_1.id || fields_1.text) &&
                            (!fields_1.id || fieldData[_this.fields.id] === fields_1.id) &&
                            (!fields_1.text || fieldData[_this.fields.text] === fields_1.text)) {
                            curAr_1 = arr;
                            idx_3 = index;
                            return true;
                        }
                        return false;
                    });
                    this.removeElement(this.getLiFromObjOrElement(curAr_1[idx_3]));
                    curAr_1.splice(idx_3, 1);
                    this.curViewDS = curAr_1;
                }
                var values = this.getSelectedItems();
                this.selectedData = (!ej2_base_1.isNullOrUndefined(values)) ? values.text : undefined;
                if (resetList && curAr_1) {
                    this.resetList = true;
                    this.resetCurrentList();
                    if (!this.showCheckBox && !ej2_base_1.isNullOrUndefined(values)) {
                        this.selectItem(values.item);
                    }
                    this.resetList = false;
                }
            }
        };
        ListView.prototype.removeMultipleItems = function (obj) {
            if (obj.length) {
                for (var i = 0; i < obj.length; i++) {
                    (i === obj.length - 1) ? this.removeItemFromList(obj[i], true) : this.removeItemFromList(obj[i], false);
                }
            }
        };
        ListView.prototype.getModuleName = function () {
            return 'listview';
        };
        ListView.prototype.getPersistData = function () {
            return this.addOnPersist(['cssClass', 'enableRtl', 'htmlAttributes',
                'enable', 'fields', 'animation', 'headerTitle',
                'sortOrder', 'showIcon', 'height', 'width', 'showCheckBox', 'checkBoxPosition']);
        };
        __decorate([
            ej2_base_3.Property()
        ], ListView.prototype, "cssClass", void 0);
        __decorate([
            ej2_base_3.Property({})
        ], ListView.prototype, "htmlAttributes", void 0);
        __decorate([
            ej2_base_3.Property(true)
        ], ListView.prototype, "enable", void 0);
        __decorate([
            ej2_base_3.Property([])
        ], ListView.prototype, "dataSource", void 0);
        __decorate([
            ej2_base_3.Property()
        ], ListView.prototype, "query", void 0);
        __decorate([
            ej2_base_3.Complex(list_base_1.ListBase.defaultMappedFields, FieldSettings)
        ], ListView.prototype, "fields", void 0);
        __decorate([
            ej2_base_3.Property({ effect: 'SlideLeft', duration: 400, easing: 'ease' })
        ], ListView.prototype, "animation", void 0);
        __decorate([
            ej2_base_3.Property('None')
        ], ListView.prototype, "sortOrder", void 0);
        __decorate([
            ej2_base_3.Property(false)
        ], ListView.prototype, "showIcon", void 0);
        __decorate([
            ej2_base_3.Property(false)
        ], ListView.prototype, "showCheckBox", void 0);
        __decorate([
            ej2_base_3.Property('Left')
        ], ListView.prototype, "checkBoxPosition", void 0);
        __decorate([
            ej2_base_3.Property('')
        ], ListView.prototype, "headerTitle", void 0);
        __decorate([
            ej2_base_3.Property(false)
        ], ListView.prototype, "showHeader", void 0);
        __decorate([
            ej2_base_3.Property('')
        ], ListView.prototype, "height", void 0);
        __decorate([
            ej2_base_3.Property('')
        ], ListView.prototype, "width", void 0);
        __decorate([
            ej2_base_3.Property(null)
        ], ListView.prototype, "template", void 0);
        __decorate([
            ej2_base_3.Property(null)
        ], ListView.prototype, "groupTemplate", void 0);
        __decorate([
            ej2_base_3.Event()
        ], ListView.prototype, "select", void 0);
        __decorate([
            ej2_base_3.Event()
        ], ListView.prototype, "actionBegin", void 0);
        __decorate([
            ej2_base_3.Event()
        ], ListView.prototype, "actionComplete", void 0);
        __decorate([
            ej2_base_3.Event()
        ], ListView.prototype, "actionFailure", void 0);
        ListView = __decorate([
            ej2_base_4.NotifyPropertyChanges
        ], ListView);
        return ListView;
    }(ej2_base_3.Component));
    exports.ListView = ListView;
});
